<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hysteria2.github.io/news/article-70932.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <!-- Webpage Title -->
    <title>数据结构详解·一树的初步</title>
        <meta name="description" content="「数据结构详解·一」树的初步   树(Tree)是最重要的数据结构之一，它是由         n         (         n         ∈         N         ) " />
        <link rel="icon" href="/assets/website/img/hysteria2/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Hysteria2官网订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hysteria2.github.io/news/article-70932.htm" />
    <meta property="og:site_name" content="Hysteria2官网订阅站" />
    <meta property="og:title" content="数据结构详解·一树的初步" />
    <meta property="og:image" content="https://hysteria2.github.io/uploads/20240507/03ccb8815250b1c4db5f2696f1fed025.webp" />
        <meta property="og:release_date" content="2025-03-10T04:36:47" />
    <meta property="og:updated_time" content="2025-03-10T04:36:47" />
        <meta property="og:description" content="「数据结构详解·一」树的初步   树(Tree)是最重要的数据结构之一，它是由         n         (         n         ∈         N         ) " />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="数据结构详解·一树的初步">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/fontawesome-all.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/swiper.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/styles.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0LQ0YHE09L"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0LQ0YHE09L');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-bs-spy="scroll" data-bs-target="#navbarExample" data-page="detail">
        <!-- Navigation -->
    <nav id="navbarExample" class="navbar navbar-expand-lg fixed-top navbar-light" aria-label="Main navigation">
        <div class="container">
            <!-- Image Logo -->
            <a class="navbar-brand logo-image" href="/">
                            <span>Hysteria2</span>
                        </a>
            <!-- Text Logo - Use this if you don't have a graphic logo -->
            <!-- <a class="navbar-brand logo-text" href="index.html">Zinc</a> -->
            <button class="navbar-toggler p-0 border-0" type="button" id="navbarSideCollapse" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse offcanvas-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav ms-auto navbar-nav-scroll">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div> <!-- end of navbar-collapse -->
        </div> <!-- end of container -->
    </nav> <!-- end of navbar -->
    <!-- end of navigation -->
    <!-- Header -->
    <header class="ex-header">
        <div class="container">
            <div class="row">
                <div class="col-xl-10 offset-xl-1">
                    <h1>数据结构详解·一树的初步</h1>
                    <div class="section-title">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </div>
                </div> <!-- end of col -->
            </div> <!-- end of row -->
        </div> <!-- end of container -->
    </header> <!-- end of ex-header -->
    <!-- end of header -->
    <!-- Details 1 -->
    <div id="details" class="basic-1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <ul> <li><strong><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/Leo_Chenjy/article/details/126072521"  rel="nofollow">「数据结构详解·一」树的初步</a></strong></li> </ul> </h1> <p>树(Tree)是最重要的数据结构之一，它是由<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        n</p> <p>        (</p> <p>        n</p> <p>        ∈</p> <p>        N</p> <p>        )</p> <p>       n(n \in \mathbb{N})</span><span class="katex-html"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathbb">N</span><span class="mclose">)</span></span></span></span></span> 个节点（也会被写作“结点”）构成的一个集合。其具有<strong>层次关系</strong>。树是<strong>递归定义</strong>的。<br /> 如下图，这就是一棵普通的树。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220818/29478f1d079b1cda019d5faaa53df30f.jpg" alt="数据结构详解·一树的初步"></p> <ul> <li>最上面的<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 称为<mark>根节点</mark>，最下面的<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         4</p> <p>         ,</p> <p>         5</p> <p>         ,</p> <p>         6</p> <p>         ,</p> <p>         9</p> <p>         ,</p> <p>         8</p> <p>        4,5,6,9,8</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">9</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">8</span></span></span></span></span> 称为<mark>叶子节点</mark>。</li> <li>每两个节点之间相连线的称为<mark>边</mark>。</li> <li><span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的下方与其相连的有<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span>，我们就说，节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span> 的<mark>父节点</mark>（父亲），<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的<mark>子节点</mark>（儿子），<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         ,</p> <p>         3</p> <p>        2,3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span></span></span></span></span> 互为<mark>兄弟节点</mark>。</li> <li>节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         9</p> <p>        9</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">9</span></span></span></span></span> 的父亲是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         7</p> <p>        7</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">7</span></span></span></span></span>，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         7</p> <p>        7</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">7</span></span></span></span></span> 的父亲是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span>，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span> 的父亲是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span>。我们认为，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>         ,</p> <p>         3</p> <p>         ,</p> <p>         7</p> <p>        1,3,7</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">7</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         9</p> <p>        9</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">9</span></span></span></span></span> 的<mark>祖先</mark>，<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>         ,</p> <p>         7</p> <p>         ,</p> <p>         9</p> <p>        3,7,9</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.8389em; vertical-align: -0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">9</span></span></span></span></span> 是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的<mark>子孙</mark>。</li> <li>节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 有<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>        2</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">2</span></span></span></span></span> 个子节点，我们认为，节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的<mark>度</mark>是<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>        2</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">2</span></span></span></span></span>。叶子结点的度为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         0</p> <p>        0</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">0</span></span></span></span></span>。</li> <li>度不为零的（非叶子节点）节点称为<mark>分支节点</mark>。</li> <li>一棵树的层数称为<mark>树的深度/树的高度</mark>。单独的根节点深度为<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         0</p> <p>        0</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">0</span></span></span></span></span> 或<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span>。图示的树的深度为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span> 或<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         4</p> <p>        4</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">4</span></span></span></span></span>。</li> <li>空集合也是树，称为<mark>空树</mark>。其没有节点。</li> <li>假如去掉了根节点，可以发现，就形成了一棵根节点为<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         2</p> <p>        2</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">2</span></span></span></span></span> 的树，一棵根节点为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         3</p> <p>        3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">3</span></span></span></span></span> 的树。我们认为这两棵树是根节点为<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的树的<mark>子树</mark>。假如这两棵树属于同一集合且不相交，我们就说这个集合时<mark>森林</mark>。</li> </ul> </h1> <ul> <li>一棵非空树<strong>有且只有一个根节点</strong>。</li> <li>每一个非根节点<strong>有且只有一个父节点</strong>。</li> <li>每一个叶子节点<strong>没有子节点</strong>。</li> <li>一棵树<strong>有且只有<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>          n</p> <p>          −</p> <p>          1</p> <p>         n-1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6667em; vertical-align: -0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span> 条边</strong>。</li> </ul> </h1> <p>我们主要介绍其中两种。</p> <h2><a id="31__21" rel="nofollow"></a>3-1. 邻接矩阵</h2> <p>顾名思义，其是一个二维数组。<br /> 定义方式：</p> <pre><code class="prism language-cpp"><span class="token keyword">bool</span> tree<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p><span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         tree</p> <p>          i</p> <p>          ,</p> <p>          j</p> <p>       \text{tree}_{i,j}</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.9012em; vertical-align: -0.2861em;"></span><span class="mord"><span class="mord text"><span class="mord">tree</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span class="" style="top: -2.55em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right: 0.0572em;">j</span></span></span></span></span><span class="vlist-s"></span></span><span class="vlist-r"><span class="vlist" style="height: 0.2861em;"><span class=""></span></span></span></span></span></span></span></span></span></span> 表示节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        i</p> <p>        ,</p> <p>        j</p> <p>       i,j</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.854em; vertical-align: -0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord mathnormal" style="margin-right: 0.0572em;">j</span></span></span></span></span> 之间是否连通。<br /> 如果要将节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        u</p> <p>       u</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span></span> 添加儿子<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        v</p> <p>       v</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal" style="margin-right: 0.0359em;">v</span></span></span></span></span>，那么操作就是<code>tree[u][v]=1;</code>。<br /> 将上图的树存储进去，就是这样的：</p> <table> <thead> <tr> <th align="center"></th> <th align="center">1</th> <th align="center">2</th> <th align="center">3</th> <th align="center">4</th> <th align="center">5</th> <th align="center">6</th> <th align="center">7</th> <th align="center">8</th> <th align="center">9</th> </tr> </thead> <tbody> <tr> <td align="center">1</td> <td align="center">0</td> <td align="center">1</td> <td align="center">1</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">2</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">1</td> <td align="center">1</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">3</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">1</td> <td align="center">1</td> <td align="center">1</td> <td align="center">0</td> </tr> <tr> <td align="center">4</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">5</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">6</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">7</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">1</td> </tr> <tr> <td align="center">8</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> <tr> <td align="center">9</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> <td align="center">0</td> </tr> </tbody> </table> <p>访问所有节点的儿子：</p> <pre><code class="prism language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//n=9</span><span class="token punctuation">{<!-- --></span> 	cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>j<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>输出：</p> <pre><code class="prism language-plain">1: 2 3 2: 4 5 3: 6 7 8 4:  5:  6: 7: 9 8:  9:</code></pre> <p>邻接矩阵的优点：简洁明了，方便快捷；<br /> 邻接矩阵的缺点：浪费空间，容易被卡。<br /> 只建议数据中结点数<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        ≤</p> <p>        8</p> <p>        ×</p> <p>        1</p> <p>         0</p> <p>         3</p> <p>       \le 8\times 10^3</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.7719em; vertical-align: -0.136em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.7278em; vertical-align: -0.0833em;"></span><span class="mord">8</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.8141em;"><span class="" style="top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> 时使用。</p> <h2><a id="32__69" rel="nofollow"></a>3-2. 邻接表</h2> <p>我们也可以采用其中一种叫做<mark>邻接表</mark>的常用存储方法。<br /> 定义方式：</p> <pre><code class="prism language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>tree<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>在<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         tree</p> <p>         i</p> <p>       \text{tree}_i</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.7651em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">tree</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span class="" style="top: -2.55em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s"></span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span> 的 vector 中，我们要存储什么呢？<br /> 没错，就是节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        i</p> <p>       i</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></span> 的儿子。<br /> 如果要将节点<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        u</p> <p>       u</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span></span> 添加儿子<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>        v</p> <p>       v</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal" style="margin-right: 0.0359em;">v</span></span></span></span></span>，那么操作就是<code>tree[u].push_back(v);</code>。<br /> 将上图的树存储进去，就是这样的：</p> <table> <thead> <tr> <th align="center">节点编号</th> <th align="center">存储情况</th> </tr> </thead> <tbody> <tr> <td align="center">1</td> <td align="center">2,3</td> </tr> <tr> <td align="center">2</td> <td align="center">4,5</td> </tr> <tr> <td align="center">3</td> <td align="center">6,7,8</td> </tr> <tr> <td align="center">4</td> <td align="center">(空)</td> </tr> <tr> <td align="center">5</td> <td align="center">(空)</td> </tr> <tr> <td align="center">6</td> <td align="center">(空)</td> </tr> <tr> <td align="center">7</td> <td align="center">9</td> </tr> <tr> <td align="center">8</td> <td align="center">(空)</td> </tr> <tr> <td align="center">9</td> <td align="center">(空)</td> </tr> </tbody> </table> <p>如果要访问，也很简单（示例代码为访问上述树的儿子）：</p> <pre><code class="prism language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//n=9</span><span class="token punctuation">{<!-- --></span> 	cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> j<span class="token operator">:</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 		cout<span class="token operator">&lt;&lt;</span>j<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>输出：</p> <pre><code class="prism language-plain">1: 2 3 2: 4 5 3: 6 7 8 4:  5:  6: 7: 9 8:  9:</code></pre> <p>邻接表的优点在于：方便、省空间、速度较快，是通用的存储方法。</p> </h1> <h2><a id="41__117" rel="nofollow"></a>4-1. 先/前序(根)遍历（深度优先遍历）</h2> <p>先序遍历的遍历顺序是<strong>根→按序遍历子树</strong>。<br /> 类似于深度优先搜索，先序遍历就是一头猛扎到底，不到黄河不回头。<br /> 示例代码（输出树的先序遍历顺序）：</p> <pre><code class="prism language-cpp"><span class="token keyword">void</span><span class="token function">pre</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment">//p 为当前节点编号</span><span class="token punctuation">{<!-- --></span> 	cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">pre</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>若为上面的树，则输出<code>1 2 4 5 3 6 7 9 8</code>。</p> <h2><a id="42__132" rel="nofollow"></a>4-2. 后序(根)遍历</h2> <p>后序遍历顺序和先序遍历相反，为<strong>按序遍历子树→根</strong>。<br /> 示例代码（输出树的后序遍历顺序）：</p> <pre><code class="prism language-cpp"><span class="token keyword">void</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment">//p 为当前节点编号</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">post</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> 	cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token comment">//可以发现，只是改动了输出位置</span><span class="token punctuation">}</span></code></pre> <p>若为上面的树，则输出<code>4 5 2 6 9 7 8 3 1</code>。</p> <h2><a id="43__147" rel="nofollow"></a>4-3. 层次遍历（宽/广度优先遍历）</h2> <p>层次遍历的写法类似广度优先搜索，使用队列存储节点，然后输出每一层的节点。<br /> 示例代码（输出树的层次遍历）：</p> <pre><code class="prism language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//root 为根节点</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 			q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>若为上面的树，则输出<code>1 2 3 4 5 6 7 8 9</code>。</p> <h2><a id="44__168" rel="nofollow"></a>4-4. 叶子节点遍历</h2> <p>顾名思义，只遍历叶子节点，那我们随便写就可以了。<br /> dfs 写法：</p> <pre><code class="prism language-cpp"><span class="token keyword">void</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment">//p 为当前节点编号</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 		cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">pre</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>bfs 写法：</p> <pre><code class="prism language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//root 为根节点</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 				q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>枚举写法：</p> <pre><code class="prism language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//n 为节点数</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> </h1> <ol> <li>给定节点关系，输出先序、后序、层次、叶节点遍历的结果（根节点不一定是<span class="katex--inline"><span class="katex"><span class="katex-mathml"> <p>         1</p> <p>        1</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">1</span></span></span></span></span>）。</li> <li>给定节点关系，求树的深度。</li> <li>给定节点关系，求出两个节点相距距离最长是多少（父子节点的边算一个单位长度）。</li> </ol> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-70279.htm">比较好的动物医院有哪些（动物医院叫什么医院）</a></p>
                                        <p>下一个：<a href="/news/article-70933.htm">Infrastructure 知识: dnf对module的处理</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-43964.htm" title="动物疫苗作用是什么 动物疫苗作用是什么意思">动物疫苗作用是什么 动物疫苗作用是什么意思</a></li>
                        <li class="py-2"><a href="/news/article-62137.htm" title="猫咪能听懂人说话吗（猫咪能听懂人说话吗知乎）">猫咪能听懂人说话吗（猫咪能听懂人说话吗知乎）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-8-free-high-speed-nodes.htm" title="2月8日|最高速度18.8M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐">2月8日|最高速度18.8M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-48911.htm" title="原生JS实现一个好看计数器">原生JS实现一个好看计数器</a></li>
                        <li class="py-2"><a href="/news/article-68983.htm" title="免费领养宠物的平台小狗是真的吗（免费领养宠物的平台小狗是真的吗知乎）">免费领养宠物的平台小狗是真的吗（免费领养宠物的平台小狗是真的吗知乎）</a></li>
                        <li class="py-2"><a href="/news/article-70278.htm" title="重庆猫咪领养微信群号（重庆猫网领养）">重庆猫咪领养微信群号（重庆猫网领养）</a></li>
                        <li class="py-2"><a href="/news/article-40507.htm" title="动物医院24小时全天候诊多少钱（动物医院一般几点关门）">动物医院24小时全天候诊多少钱（动物医院一般几点关门）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-16-shadowrocket-node.htm" title="1月16日|最高速度21.2M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐">1月16日|最高速度21.2M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-38020.htm" title="佳雯宠物医院客服电话是多少啊（佳雯宠物医院总部地址）">佳雯宠物医院客服电话是多少啊（佳雯宠物医院总部地址）</a></li>
                        <li class="py-2"><a href="/news/article-47433.htm" title="中国兽药厂家排名前100强有哪些 中国兽药厂家排名前100强有哪些品牌">中国兽药厂家排名前100强有哪些 中国兽药厂家排名前100强有哪些品牌</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div> <!-- end of container -->
    </div> <!-- end of basic-1 -->
    <!-- end of details 1 -->
    
        <!-- Copyright -->
    <div class="copyright bg-gray">
        <div class="container">
            <div class="row">
                <div class="col-lg-6">
                    <ul class="list-unstyled li-space-lg p-small">
                        <li><a href="#">Article Details</a></li>
                        <li><a href="#">Terms & Conditions</a></li>
                        <li><a href="#">Privacy Policy</a></li>
                    </ul>
                </div> <!-- end of col -->
                <div class="col-lg-6">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        <a href="/">Hysteria2官网订阅站</a> 版权所有 Powered by WordPress
                    </p>
                </div> <!-- end of col -->
            </div> <!-- enf of row -->
        </div> <!-- end of container -->
    </div> <!-- end of copyright -->
    <!-- end of copyright -->
    <!-- Back To Top Button -->
    <button onclick="topFunction()" id="myBtn">
        <img src="/assets/website/img/hysteria2/up-arrow.png" alt="alternative">
    </button>
    <!-- end of back to top button -->
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/hysteria2/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2/bootstrap.min.js"></script> <!-- Bootstrap framework -->
    <script src="/assets/website/js/frontend/hysteria2/swiper.min.js"></script> <!-- Swiper for image and text sliders -->
    <script src="/assets/website/js/frontend/hysteria2/purecounter.min.js"></script> <!-- Purecounter counter for statistics numbers -->
    <script src="/assets/website/js/frontend/hysteria2/isotope.pkgd.min.js"></script> <!-- Isotope for filter -->
    <script src="/assets/website/js/frontend/hysteria2/scripts.js"></script> <!-- Custom scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>