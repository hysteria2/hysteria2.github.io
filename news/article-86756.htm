<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hysteria2.github.io/news/article-86756.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <!-- Webpage Title -->
    <title>SpringCloudAlibaba微服务docker容器打包和部署示例实战</title>
        <meta name="description" content="我们使用前面《SpringCloudAlibaba注册中心与配置中心之利器Nacos实战与源码分析（中）》的两个微服务示例，分别是库存微服务和订单微服务，基于Nacos注册中心和配置中心的使用，前面N" />
        <link rel="icon" href="/assets/website/img/hysteria2/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Hysteria2官网订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hysteria2.github.io/news/article-86756.htm" />
    <meta property="og:site_name" content="Hysteria2官网订阅站" />
    <meta property="og:title" content="SpringCloudAlibaba微服务docker容器打包和部署示例实战" />
    <meta property="og:image" content="https://hysteria2.github.io/uploads/20240507/b34dd065d341009ed896d86c0531fd44.webp" />
        <meta property="og:release_date" content="2025-04-02T07:44:24" />
    <meta property="og:updated_time" content="2025-04-02T07:44:24" />
        <meta property="og:description" content="我们使用前面《SpringCloudAlibaba注册中心与配置中心之利器Nacos实战与源码分析（中）》的两个微服务示例，分别是库存微服务和订单微服务，基于Nacos注册中心和配置中心的使用，前面N" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringCloudAlibaba微服务docker容器打包和部署示例实战">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/fontawesome-all.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/swiper.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/styles.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0LQ0YHE09L"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0LQ0YHE09L');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-bs-spy="scroll" data-bs-target="#navbarExample" data-page="detail">
        <!-- Navigation -->
    <nav id="navbarExample" class="navbar navbar-expand-lg fixed-top navbar-light" aria-label="Main navigation">
        <div class="container">
            <!-- Image Logo -->
            <a class="navbar-brand logo-image" href="/">
                            <span>Hysteria2</span>
                        </a>
            <!-- Text Logo - Use this if you don't have a graphic logo -->
            <!-- <a class="navbar-brand logo-text" href="index.html">Zinc</a> -->
            <button class="navbar-toggler p-0 border-0" type="button" id="navbarSideCollapse" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse offcanvas-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav ms-auto navbar-nav-scroll">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div> <!-- end of navbar-collapse -->
        </div> <!-- end of container -->
    </nav> <!-- end of navbar -->
    <!-- end of navigation -->
    <!-- Header -->
    <header class="ex-header">
        <div class="container">
            <div class="row">
                <div class="col-xl-10 offset-xl-1">
                    <h1>SpringCloudAlibaba微服务docker容器打包和部署示例实战</h1>
                    <div class="section-title">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </div>
                </div> <!-- end of col -->
            </div> <!-- end of row -->
        </div> <!-- end of container -->
    </header> <!-- end of ex-header -->
    <!-- end of header -->
    <!-- Details 1 -->
    <div id="details" class="basic-1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p>我们使用前面《SpringCloudAlibaba注册中心与配置中心之利器Nacos实战与源码分析（中）》的两个微服务示例，分别是库存微服务和订单微服务，基于Nacos注册中心和配置中心的使用，前面Nacos我们已基于dock-compose方式部署，我们增加配置数据，这里我们暂时也不把数据打包进去，各位可以直接将容器以dokcer export方式导入为镜像，微服务使用订单、库存MySQL数据库暂时也不单独做成镜像，各位可以做成SQL脚本执行导入方式。</p> </h1> <ul> <li>docker目录docker compose编排脚本目录 <ul> <li>bin目录：包含初始化脚本、启动脚本、停止脚本、更新脚本</li> <li>env目录：存在为微服务环境变量</li> <li>yaml目录：存在全局环境脚本变量、微服务docker-compose脚本</li> </ul> </li> <li>库存微服务 <ul> <li>bin目录：存在微服务启动脚本</li> <li>conf目录：存在启动配置文件和日志配置文件</li> <li>Dockerfile文件</li> </ul> </li> <li>订单微服务 <ul> <li>bin目录：存在微服务启动脚本</li> <li>conf目录：存在启动配置文件和日志配置文件</li> <li>Dockerfile文件</li> </ul> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/fdb7f1fc0a932a70a9db8cbe125fff12.jpg" alt="SpringCloudAlibaba微服务docker容器打包和部署示例实战"></p> </h1> <h2 id="编写配置文件">编写配置文件</h2> <p>bootstrap.yml</p> <pre><code class="language-yaml">spring:   application:     name: ecom-storage-service   profiles:     active: ${SPRING_PROFILES_ACTIVE:"dev"}   main:     allow-circular-references: true   cloud:     nacos:       # 注册中心信息放在配置中心上，每个程序一般只配置配置中心的信息       server-addr: ${NACOS_CONFIG_SERVER:"192.168.50.95:8848"}       config:         server-addr: ${spring.cloud.nacos.server-addr}         file-extension: yaml         namespace: ${NACOS_CONFIG_NAMESPACE:"a2b1a5b7-d0bc-48e8-ab65-04695e61db01"}         group: ${NACOS_CONFIG_GROUP:"storage-group"}         extension-configs:           - dataId: extension-priority-dev.yaml             group: extension-group             refresh: true           - dataId: commons-dev.yaml             group: commons-group             refresh: true         shared-configs:           - dataId: shared-priority-dev.yaml             group: shared-group             refresh: true         username: itsx         password: itxs123         enabled: true # 默认为true，设置false 来完全关闭 Spring Cloud Nacos Config         refresh-enabled: true # 默认为true，当变更配置时，应用程序中能够获取到最新的值，设置false来关闭动态刷新，我们使用注册中心场景大部分就是动态感知，因此基本使用默认的</code></pre> <p>logback.xml</p> <pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;configuration debug="false"&gt;     &lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;     &lt;springProperty scope="context" name="APP_HOME" source="spring.application.name"/&gt;     &lt;property name="LOG_HOME" value="${LOG_PATH:-.}" /&gt;     &lt;!-- 控制台输出设置 --&gt;     &lt;!-- 彩色日志格式，magenta：洋红，boldMagenta：粗红，yan：青色，·⊱══&gt; --&gt;     &lt;property name="CONSOLE_LOG_PATTERN" value="%boldMagenta([%d{yyyy-MM-dd HH:mm:ss.SSS}]) %cyan([%X{requestId}]) %boldMagenta(%-5level) %blue(%logger{15}) %red([%thread]) %magenta(·⊱══&gt;) %cyan(%msg%n)"/&gt;     &lt;appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"&gt;         &lt;encoder&gt;             &lt;pattern&gt;${CONSOLE_LOG_PATTERN}&lt;/pattern&gt;             &lt;charset&gt;utf8&lt;/charset&gt;         &lt;/encoder&gt;     &lt;/appender&gt;     &lt;!-- 按天输出日志设置 --&gt;     &lt;appender name="DAY_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;         &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;             &lt;!-- 日志文件输出的文件名 --&gt;             &lt;FileNamePattern&gt;${LOG_HOME}/%d{yyyy-MM-dd}_${APP_HOME}.%i.log&lt;/FileNamePattern&gt;             &lt;!-- 日志文件保留天数 --&gt;             &lt;MaxHistory&gt;7&lt;/MaxHistory&gt;             &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                 &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;             &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;         &lt;/rollingPolicy&gt;         &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;             &lt;level&gt;INFO&lt;/level&gt;             &lt;!-- 设置拦截的对象为INFO级别日志 --&gt;             &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;       &lt;!-- 当遇到了INFO级别时，启用改段配置 --&gt;             &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;   &lt;!-- 没有遇到INFO级别日志时，屏蔽改段配置 --&gt;         &lt;/filter&gt;         &lt;encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"&gt;             &lt;!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 --&gt;             &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&lt;/pattern&gt;         &lt;/encoder&gt;     &lt;/appender&gt;     &lt;!-- 按天输出WARN级别日志设置 --&gt;     &lt;appender name="DAY_WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;         &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;             &lt;!-- 日志文件输出的文件名 --&gt;             &lt;FileNamePattern&gt;${LOG_HOME}/%d{yyyy-MM-dd}_${APP_HOME}_warn.%i.log&lt;/FileNamePattern&gt;             &lt;!-- 日志文件保留天数 --&gt;             &lt;MaxHistory&gt;7&lt;/MaxHistory&gt;             &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                 &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;             &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;         &lt;/rollingPolicy&gt;         &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;             &lt;level&gt;WARN&lt;/level&gt;             &lt;!-- 设置拦截的对象为INFO级别日志 --&gt;             &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;       &lt;!-- 当遇到了INFO级别时，启用改段配置 --&gt;             &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;   &lt;!-- 没有遇到INFO级别日志时，屏蔽改段配置 --&gt;         &lt;/filter&gt;         &lt;encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"&gt;             &lt;!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 --&gt;             &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&lt;/pattern&gt;         &lt;/encoder&gt;     &lt;/appender&gt;     &lt;!-- 按天输出ERROR级别日志设置 --&gt;     &lt;appender name="DAY_ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;         &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;             &lt;!-- 日志文件输出的文件名 --&gt;             &lt;FileNamePattern&gt;${LOG_HOME}/%d{yyyy-MM-dd}_${APP_HOME}_error.%i.log&lt;/FileNamePattern&gt;             &lt;!-- 日志文件保留天数 --&gt;             &lt;MaxHistory&gt;7&lt;/MaxHistory&gt;             &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                 &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;             &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;         &lt;/rollingPolicy&gt;         &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;             &lt;level&gt;ERROR&lt;/level&gt;            &lt;!-- 设置拦截的对象为ERROR级别日志 --&gt;             &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;       &lt;!-- 当遇到了ERROR级别时，启用改段配置 --&gt;             &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;   &lt;!-- 没有遇到ERROR级别日志时，屏蔽改段配置 --&gt;         &lt;/filter&gt;         &lt;encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"&gt;             &lt;!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 --&gt;             &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&lt;/pattern&gt;         &lt;/encoder&gt;     &lt;/appender&gt;      &lt;!-- 日志输出级别，OFF level &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; ALL level --&gt;     &lt;logger name="com.sand" level="INFO"/&gt;     &lt;logger name="com.apache.ibatis" level="INFO"/&gt;     &lt;logger name="java.sql.Statement" level="INFO"/&gt;     &lt;logger name="java.sql.Connection" level="INFO"/&gt;     &lt;logger name="java.sql.PreparedStatement" level="INFO"/&gt;     &lt;logger name="org.springframework" level="WARN"/&gt;     &lt;logger name="com.baomidou.mybatisplus" level="WARN"/&gt;      &lt;!-- 开发环境：打印控制台和输出到文件 --&gt;     &lt;springProfile name="dev"&gt;         &lt;root level="INFO"&gt;             &lt;appender-ref ref="CONSOLE"/&gt;             &lt;appender-ref ref="DAY_FILE"/&gt;             &lt;appender-ref ref="DAY_WARN_FILE"/&gt;             &lt;appender-ref ref="DAY_ERROR_FILE"/&gt;         &lt;/root&gt;     &lt;/springProfile&gt;      &lt;!-- 生产环境：打印控制台和输出到文件 --&gt;     &lt;springProfile name="pro"&gt;         &lt;root level="INFO"&gt;             &lt;appender-ref ref="CONSOLE"/&gt;             &lt;appender-ref ref="DAY_FILE"/&gt;             &lt;appender-ref ref="DAY_WARN_FILE"/&gt;             &lt;appender-ref ref="DAY_ERROR_FILE"/&gt;         &lt;/root&gt;     &lt;/springProfile&gt; &lt;/configuration&gt;</code></pre> <h2 id="制作docker启动脚本">制作Docker启动脚本</h2> <p>docker-startup.sh</p> <pre><code class="language-shell">#!/bin/bash set -x export CUSTOM_SEARCH_NAMES="application,custom" export CUSTOM_SEARCH_LOCATIONS=${BASE_DIR}/init.d/,file:${BASE_DIR}/conf/  JAVA_OPT="${JAVA_OPT} -Dsimple_ecommerce.home=${BASE_DIR}" JAVA_OPT="${JAVA_OPT} -jar ${BASE_DIR}/target/ecom-storage-service.jar" JAVA_OPT="${JAVA_OPT} ${JAVA_OPT_EXT}" JAVA_OPT="${JAVA_OPT} --spring.config.additional-location=${CUSTOM_SEARCH_LOCATIONS}" JAVA_OPT="${JAVA_OPT} --spring.config.name=${CUSTOM_SEARCH_NAMES}" JAVA_OPT="${JAVA_OPT} --logging.config=${BASE_DIR}/conf/logback.xml" JAVA_OPT="${JAVA_OPT} --logging.file.path=${BASE_DIR}/logs/" JAVA_OPT="${JAVA_OPT} --spring.config.location=${BASE_DIR}/conf/bootstrap.yml" JAVA_OPT="${JAVA_OPT} --server.max-http-header-size=524288"  echo "ecom-storage-service is starting, you can docker logs your container" exec $JAVA ${JAVA_OPT}</code></pre> <h2 id="制作dockerfile文件">制作Dockerfile文件</h2> <p>Dockerfile文件</p> <pre><code class="language-dockerfile">FROM java:8 MAINTAINER itxs "107734588@qq.com"  ARG ECOM_STORAGE_SERVICE_VERSION=1.0 ARG ECOM_STORAGE_SERVICE_DIR="ecom-storage-service" ARG ECOM_STORAGE_SERVICE_PACKAGE="ecom-storage-service-$ECOM_STORAGE_SERVICE_VERSION.jar" ARG ECOM_STORAGE_SERVICE_PROGRAM="ecom-storage-service.jar"  # set environment ENV BASE_DIR="/home/simple_ecommerce/${ECOM_STORAGE_SERVICE_DIR}" \     CLASSPATH=".:/home/simple_ecommerce/${ECOM_STORAGE_SERVICE_DIR}/conf:$CLASSPATH" \     JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64" \     JAVA="/usr/lib/jvm/java-8-openjdk-amd64/bin/java" \     JAVA_OPT_EXT="${JAVA_OPT_EXT}" \     TIME_ZONE="Asia/Shanghai"  WORKDIR $BASE_DIR  ADD ./target/$ECOM_STORAGE_SERVICE_PACKAGE target/$ECOM_STORAGE_SERVICE_PROGRAM RUN ln -snf /usr/share/zoneinfo/$TIME_ZONE /etc/localtime &amp;&amp; echo $TIME_ZONE &gt; /etc/timezone  ADD bin/docker-startup.sh bin/docker-startup.sh ADD conf/bootstrap.yml conf/bootstrap.yml ADD conf/logback.xml conf/logback.xml RUN mkdir -p init.d  # set startup log dir RUN mkdir -p logs \         &amp;&amp; cd logs \         &amp;&amp; touch start.out \         &amp;&amp; ln -sf /dev/stdout start.out \         &amp;&amp; ln -sf /dev/stderr start.out RUN chmod +x bin/docker-startup.sh  EXPOSE 4080 ENTRYPOINT ["bin/docker-startup.sh"]</code></pre> <h2 id="打包配置">打包配置</h2> <p>库存微服务pom文件添加docker-maven-plugin</p> <pre><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;     &lt;parent&gt;         &lt;artifactId&gt;simple-ecommerce&lt;/artifactId&gt;         &lt;groupId&gt;cn.itxs&lt;/groupId&gt;         &lt;version&gt;1.0&lt;/version&gt;     &lt;/parent&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;artifactId&gt;ecom-storage-service&lt;/artifactId&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;     &lt;version&gt;1.0&lt;/version&gt;     &lt;name&gt;ecom-storage-service&lt;/name&gt;     &lt;description&gt;a simple electronic commerce platform demo tutorial for storage service&lt;/description&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;cn.itxs&lt;/groupId&gt;             &lt;artifactId&gt;ecom-commons&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;!-- 指定该Main Class为全局的唯一入口 --&gt;                     &lt;mainClass&gt;cn.itxs.ecom.storage.StorageServiceApplication&lt;/mainClass&gt;                     &lt;layout&gt;ZIP&lt;/layout&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;repackage&lt;/goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;              &lt;plugin&gt;                 &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;0.39.1&lt;/version&gt;                 &lt;configuration&gt;                     &lt;authConfig&gt;                         &lt;!-- registry服务的认证--&gt;                         &lt;username&gt;admin&lt;/username&gt;                         &lt;password&gt;admin12345&lt;/password&gt;                     &lt;/authConfig&gt;                     &lt;images&gt;                         &lt;image&gt;                             &lt;!-- 指定image的名字（包含registry地址）--&gt;                             &lt;name&gt;simple_ecommerce/${project.name}:${project.version}&lt;/name&gt;                             &lt;!--registry地址,用于推送,拉取镜像--&gt;                             &lt;registry&gt;registry.itxs.cn&lt;/registry&gt;                             &lt;!-- 别名为master，不关键--&gt;                             &lt;alias&gt;master&lt;/alias&gt;                             &lt;build&gt;                                 &lt;!-- 指定dockerfile文件的位置--&gt;                                 &lt;dockerFile&gt;${project.basedir}/Dockerfile&lt;/dockerFile&gt;                                 &lt;buildOptions&gt;                                     &lt;!-- 网络的配置，与宿主主机共端口号--&gt;                                     &lt;network&gt;host&lt;/network&gt;                                 &lt;/buildOptions&gt;                             &lt;/build&gt;                         &lt;/image&gt;                     &lt;/images&gt;                 &lt;/configuration&gt;                  &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;docker-exec&lt;/id&gt;                         &lt;!-- 绑定mvn install阶段，当执行mvn install时 就会执行docker build 和docker push--&gt;                         &lt;phase&gt;install&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;build&lt;/goal&gt;                             &lt;goal&gt;push&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt;</code></pre> <p>可以看到库存微服务pom文件添加docker-maven-plugin，mvn install阶段，当执行mvn install时 就会执行docker build 和docker push，我们前面也介绍Docker Harbor私有仓库的部署，可以通过插件直接推送内网的Harbor私有仓库里。</p> </h1> <h2 id="编写配置文件-1">编写配置文件</h2> <p>bootstrap.yml</p> <pre><code class="language-yaml">spring:   application:     name: ecom-order-service   profiles:     active: dev   main:     allow-circular-references: true   cloud:     # 负载均衡器缓存     loadbalancer:       cache:         enabled: true         caffeine:           spec: initialCapacity=500,expireAfterWrite=5s     nacos:       # 注册中心信息放在配置中心上，每个程序一般只配置配置中心的信息       server-addr: ${NACOS_CONFIG_SERVER:"192.168.50.95:8848"}       config:         server-addr: ${spring.cloud.nacos.server-addr}         file-extension: yaml         namespace: ${NACOS_CONFIG_NAMESPACE:"a2b1a5b7-d0bc-48e8-ab65-04695e61db01"}         group: ${NACOS_CONFIG_GROUP:"order-group"}         username: itsx         password: itxs123         extension-configs:           - dataId: commons-dev.yaml             group: commons-group             refresh: true         enabled: true # 默认为true，设置false 来完全关闭 Spring Cloud Nacos Config         refresh-enabled: true # 默认为true，当变更配置时，应用程序中能够获取到最新的值，设置false来关闭动态刷新，我们使用注册中心场景大部分就是动态感知，因此基本使用默认的</code></pre> <h2 id="制作docker启动脚本-1">制作Docker启动脚本</h2> <p>docker-startup.sh</p> <pre><code class="language-shell">#!/bin/bash set -x export CUSTOM_SEARCH_NAMES="application,custom" export CUSTOM_SEARCH_LOCATIONS=${BASE_DIR}/init.d/,file:${BASE_DIR}/conf/  JAVA_OPT="${JAVA_OPT} -Dsimple_ecommerce.home=${BASE_DIR}" JAVA_OPT="${JAVA_OPT} -jar ${BASE_DIR}/target/ecom-order-service.jar" JAVA_OPT="${JAVA_OPT} ${JAVA_OPT_EXT}" JAVA_OPT="${JAVA_OPT} --spring.config.additional-location=${CUSTOM_SEARCH_LOCATIONS}" JAVA_OPT="${JAVA_OPT} --spring.config.name=${CUSTOM_SEARCH_NAMES}" JAVA_OPT="${JAVA_OPT} --logging.config=${BASE_DIR}/conf/logback.xml" JAVA_OPT="${JAVA_OPT} --logging.file.path=${BASE_DIR}/logs/" JAVA_OPT="${JAVA_OPT} --spring.config.location=${BASE_DIR}/conf/bootstrap.yml" JAVA_OPT="${JAVA_OPT} --server.max-http-header-size=524288"  echo "ecom-order-service is starting, you can docker logs your container" exec $JAVA ${JAVA_OPT}</code></pre> <h2 id="制作dockerfile文件-1">制作Dockerfile文件</h2> <p>Dockerfile文件</p> <pre><code class="language-dockerfile">FROM java:8 MAINTAINER itxs "107734588@qq.com"  ARG ECOM_ORDER_SERVICE_VERSION=1.0 ARG ECOM_ORDER_SERVICE_DIR="ecom-order-service" ARG ECOM_ORDER_SERVICE_PACKAGE="ecom-order-service-$ECOM_ORDER_SERVICE_VERSION.jar" ARG ECOM_ORDER_SERVICE_PROGRAM="ecom-order-service.jar"  # set environment ENV BASE_DIR="/home/simple_ecommerce/${ECOM_ORDER_SERVICE_DIR}" \     CLASSPATH=".:/home/simple_ecommerce/${ECOM_ORDER_SERVICE_DIR}/conf:$CLASSPATH" \     JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64" \     JAVA="/usr/lib/jvm/java-8-openjdk-amd64/bin/java" \     JAVA_OPT_EXT="${JAVA_OPT_EXT}" \     TIME_ZONE="Asia/Shanghai"  WORKDIR $BASE_DIR  ADD ./target/$ECOM_ORDER_SERVICE_PACKAGE target/$ECOM_ORDER_SERVICE_PROGRAM RUN ln -snf /usr/share/zoneinfo/$TIME_ZONE /etc/localtime &amp;&amp; echo $TIME_ZONE &gt; /etc/timezone  ADD bin/docker-startup.sh bin/docker-startup.sh ADD conf/bootstrap.yml conf/bootstrap.yml ADD conf/logback.xml conf/logback.xml RUN mkdir -p init.d  # set startup log dir RUN mkdir -p logs \         &amp;&amp; cd logs \         &amp;&amp; touch start.out \         &amp;&amp; ln -sf /dev/stdout start.out \         &amp;&amp; ln -sf /dev/stderr start.out RUN chmod +x bin/docker-startup.sh  EXPOSE 4070 ENTRYPOINT ["bin/docker-startup.sh"]</code></pre> <h2 id="打包配置-1">打包配置</h2> <p>订单微服务pom文件添加docker-maven-plugin</p> <pre><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;     &lt;parent&gt;         &lt;artifactId&gt;simple-ecommerce&lt;/artifactId&gt;         &lt;groupId&gt;cn.itxs&lt;/groupId&gt;         &lt;version&gt;1.0&lt;/version&gt;     &lt;/parent&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;artifactId&gt;ecom-order-service&lt;/artifactId&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;     &lt;version&gt;1.0&lt;/version&gt;     &lt;name&gt;ecom-order-service&lt;/name&gt;     &lt;description&gt;a simple electronic commerce platform demo tutorial for order service&lt;/description&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;cn.itxs&lt;/groupId&gt;             &lt;artifactId&gt;ecom-commons&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;scope&gt;provided&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.github.ben-manes.caffeine&lt;/groupId&gt;             &lt;artifactId&gt;caffeine&lt;/artifactId&gt;             &lt;version&gt;3.0.6&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                 &lt;configuration&gt;                     &lt;!-- 指定该Main Class为全局的唯一入口 --&gt;                     &lt;mainClass&gt;cn.itxs.ecom.order.OrderServiceApplication&lt;/mainClass&gt;                     &lt;layout&gt;ZIP&lt;/layout&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;goals&gt;                             &lt;goal&gt;repackage&lt;/goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;              &lt;plugin&gt;                 &lt;groupId&gt;io.fabric8&lt;/groupId&gt;                 &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;                 &lt;version&gt;0.39.1&lt;/version&gt;                 &lt;configuration&gt;                     &lt;authConfig&gt;                         &lt;!-- registry服务的认证--&gt;                         &lt;username&gt;admin&lt;/username&gt;                         &lt;password&gt;admin12345&lt;/password&gt;                     &lt;/authConfig&gt;                     &lt;images&gt;                         &lt;image&gt;                             &lt;!-- 指定image的名字（包含registry地址）--&gt;                             &lt;name&gt;simple_ecommerce/${project.name}:${project.version}&lt;/name&gt;                             &lt;!--registry地址,用于推送,拉取镜像--&gt;                             &lt;registry&gt;registry.itxs.cn&lt;/registry&gt;                             &lt;!-- 别名为master，不关键--&gt;                             &lt;alias&gt;master&lt;/alias&gt;                             &lt;build&gt;                                 &lt;!-- 指定dockerfile文件的位置--&gt;                                 &lt;dockerFile&gt;${project.basedir}/Dockerfile&lt;/dockerFile&gt;                                 &lt;buildOptions&gt;                                     &lt;!-- 网络的配置，与宿主主机共端口号--&gt;                                     &lt;network&gt;host&lt;/network&gt;                                 &lt;/buildOptions&gt;                             &lt;/build&gt;                         &lt;/image&gt;                     &lt;/images&gt;                 &lt;/configuration&gt;                  &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;docker-exec&lt;/id&gt;                         &lt;!-- 绑定mvn install阶段，当执行mvn install时 就会执行docker build 和docker push--&gt;                         &lt;phase&gt;install&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;build&lt;/goal&gt;                             &lt;goal&gt;push&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt;</code></pre> <p>上面订单微服务pom文件添加docker-maven-plugin，mvn install阶段，当执行mvn install时 就会执行docker build 和docker push，我们前面也介绍Docker Harbor私有仓库的部署，可以通过插件直接推送内网的Harbor私有仓库里。</p> </h1> <pre><code class="language-shell"># 由于需要进行docker build 和docker push，打包机器需要安装docker，直接执行mvn clean install 即可，如果需要单独mvn clean install# 如果是单独针对库存微服务只进行docker build，可以进入库存微服务目录mvn clean package docker:bulid</code></pre> <p>docker build两个微服务的镜像文件如下，这个是我单独docker build没有push.如果install的话上传内网Harbor仓库本地先生成镜像，然后再上传最后删除本地的镜像。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/845d1c7f99d039404d5b848d398cd5fd.jpg" alt="SpringCloudAlibaba微服务docker容器打包和部署示例实战"></p> </h1> <h2 id="env目录">env目录</h2> <p>订单微服务环境变量ecom-order-service.env，这里NACOS_CONFIG_SERVER简单先用地址，如果是在单个宿主机或者K8s环境下，并且在同个容器网络内可以直接使用容器名，可不需要Nacos地址配置，这里我们就先用暴露宿主机端口，先重点放在两个微服务容器上。</p> <pre><code class="language-shell">SPRING_PROFILES_ACTIVE=dev NACOS_CONFIG_SERVER=192.168.50.95:8848 NACOS_CONFIG_NAMESPACE=a2b1a5b7-d0bc-48e8-ab65-04695e61db01 NACOS_CONFIG_GROUP=order-group JAVA_OPT_EXT="-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms1024m -Xmx1024m -Xmn1024m -XX:-UseAdaptiveSizePolicy -XX:SurvivorRatio=4 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:-CMSConcurrentMTEnabled -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=256m"</code></pre> <p>库存微服务环境变量ecom-storage-service.env</p> <pre><code class="language-shell">SPRING_PROFILES_ACTIVE=dev NACOS_CONFIG_SERVER=192.168.50.95:8848 NACOS_CONFIG_NAMESPACE=a2b1a5b7-d0bc-48e8-ab65-04695e61db01 NACOS_CONFIG_GROUP=storage-group JAVA_OPT_EXT="-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xms1024m -Xmx1024m -Xmn1024m -XX:-UseAdaptiveSizePolicy -XX:SurvivorRatio=4 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:-CMSConcurrentMTEnabled -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=256m"</code></pre> <h2 id="制作docker-compose编排文件">制作Docker-Compose编排文件</h2> <p>我这里做法没有将多个微服务编排的一个Docker-Compose文件里，而已单独做一个Docker-Compose，通过shell脚本串联起来执行，各位也可以直接编写一个Docker-Compose</p> <p>全局环境变量.env存放全局参数信息，例如各微服务的版本信息</p> <pre><code class="language-shell">ECOM_STORAGE_VERSION=1.0ECOM_ORDER_VERSION=1.0</code></pre> <p>库存微服务Docker-Compose文件ecom-storage-service.yml,如果是本地build则image去掉registry.itxs.cn/</p> <pre><code class="language-yaml">version: "3" services:   ecom-storage-service:     image: registry.itxs.cn/simple_ecommerce/ecom-storage-service:${ECOM_STORAGE_VERSION}     container_name: ecom-storage-service     env_file:       - ../env/ecom-storage-service.env     volumes:       - ../logs/ecom-storage-service/:/home/simple_ecommerce/ecom-storage-service/logs     ports:       - "4080:4080"     networks:       - simple_ecommerce     restart: always networks:   simple_ecommerce:     external: true</code></pre> <p>订单微服务Docker-Compose文件ecom-order-service.yml</p> <pre><code class="language-yaml">version: "3" services:   ecom-order-service:     image: registry.itxs.cn/simple_ecommerce/ecom-order-service:${ECOM_ORDER_VERSION}     container_name: ecom-order-service     env_file:       - ../env/ecom-order-service.env     volumes:       - ../logs/ecom-order-service/:/home/simple_ecommerce/ecom-order-service/logs     ports:       - "4070:4070"     networks:       - simple_ecommerce     restart: always networks:   simple_ecommerce:     external: true</code></pre> <h2 id="部署脚本">部署脚本</h2> <p>bin目录下我们创建操作脚本，init.sh初始化检查环境、安装docker和docker-compose、</p> <pre><code class="language-shell">#!/usr/bin/env bash  echo "############当前操作系统版本##############" if ! type yum &gt;/dev/null 2&gt;&amp;1; then         echo "【ERROR】目前脚本仅支持CentOS7.X系统"         exit 8 else         osVersion=$(echo `cat /etc/redhat-release | sed -r 's/.* ([0-9]+)\..*/\1/'`)         if [[ "$osVersion" != "7" ]]; then              echo "【ERROR】目前脚本仅支持CentOS7.X系统"              exit 8         else              echo '版本校验成功'          fi fi  echo "############判断是否安装了docker##############" if ! type docker &gt;/dev/null 2&gt;&amp;1; then     echo 'docker 未安装'; 	  echo '开始安装Docker....';     yum install -y yum-utils     yum-config-manager \           --add-repo \           https://download.docker.com/linux/centos/docker-ce.repo      #安装docker核心引擎、命令行客户端、容器     yum install docker-ce docker-ce-cli containerd.io     echo 'docker 安装完毕';     #启动docker 	  echo '配置Docker开启启动'; 	  systemctl enable docker 	  systemctl start docker  cat &gt;&gt; /etc/docker/daemon.json &lt;&lt; EOF {   "registry-mirrors": ["https://b9pmyelo.mirror.aliyuncs.com"] } EOF 	  systemctl restart docker else     echo 'docker 安装完毕'; fi  echo "############判断是否安装了wget##############" if ! type wget &gt;/dev/null 2&gt;&amp;1; then     echo 'wget 未安装'; 	  echo '开始安装wget....'; 	  yum -y install wget else     echo 'wget 已安装'; fi  echo "############判断是否安装了dos2unix##############" if ! type dos2unix &gt;/dev/null 2&gt;&amp;1; then     echo 'dos2unix 未安装'; 	  echo '开始安装dos2unix....'; 	  yum -y install dos2unix* else     echo 'dos2unix 已安装'; fi  echo "############判断是否安装了docker-compose##############" if ! type docker-compose &gt;/dev/null 2&gt;&amp;1; then     echo 'docker-compose 未安装'; 	  echo '开始安装docker-compose....'; 	  wget http://www.itxiaoshen.com:3001/assets/docker-compose 	  chmod +x docker-compose 	  mv docker-compose /usr/local/bin/ 	  docker-compose -v 	  echo 'docker-compose安装完毕....'; else     echo 'docker-compose 已安装'; fi  echo '创建simple_ecommerce网络'; docker network create simple_ecommerce  # 添加执行权限 chmod +x ../bin/startup-all.sh chmod +x ../bin/shutdown-all.sh chmod +x ../bin/update.sh chmod +x ../bin/wait-for-it.sh  # 修改编码 echo "修改编码...." dos2unix startup-all.sh dos2unix shutdown-all.sh dos2unix update.sh dos2unix wait-for-it.sh  sh startup-all.sh</code></pre> <p>wait-for-it.sh等待请求脚本</p> <pre><code class="language-shell">#!/usr/bin/env bash # Use this script to test if a given TCP host/port are available  WAITFORIT_cmdname=${0##*/}  echoerr() { if [[ $WAITFORIT_QUIET -ne 1 ]]; then echo "$@" 1&gt;&amp;2; fi }  usage() {     cat &lt;&lt; USAGE &gt;&amp;2 Usage:     $WAITFORIT_cmdname host:port [-s] [-t timeout] [-- command args]     -h HOST | --host=HOST       Host or IP under test     -p PORT | --port=PORT       TCP port under test                                 Alternatively, you specify the host and port as host:port     -s | --strict               Only execute subcommand if the test succeeds     -q | --quiet                Don't output any status messages     -t TIMEOUT | --timeout=TIMEOUT                                 Timeout in seconds, zero for no timeout     -- COMMAND ARGS             Execute command with args after the test finishes USAGE     exit 1 }  wait_for() {     if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then         echoerr "$WAITFORIT_cmdname: waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"     else         echoerr "$WAITFORIT_cmdname: waiting for $WAITFORIT_HOST:$WAITFORIT_PORT without a timeout"     fi     WAITFORIT_start_ts=$(date +%s)     while :     do         if [[ $WAITFORIT_ISBUSY -eq 1 ]]; then             nc -z $WAITFORIT_HOST $WAITFORIT_PORT             WAITFORIT_result=$?         else             (echo -n &gt; /dev/tcp/$WAITFORIT_HOST/$WAITFORIT_PORT) &gt;/dev/null 2&gt;&amp;1             WAITFORIT_result=$?         fi         if [[ $WAITFORIT_result -eq 0 ]]; then             WAITFORIT_end_ts=$(date +%s)             echoerr "$WAITFORIT_cmdname: $WAITFORIT_HOST:$WAITFORIT_PORT is available after $((WAITFORIT_end_ts - WAITFORIT_start_ts)) seconds"             break         fi         sleep 1     done     return $WAITFORIT_result }  wait_for_wrapper() {     # In order to support SIGINT during timeout: http://unix.stackexchange.com/a/57692     if [[ $WAITFORIT_QUIET -eq 1 ]]; then         timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --quiet --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &amp;     else         timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &amp;     fi     WAITFORIT_PID=$!     trap "kill -INT -$WAITFORIT_PID" INT     wait $WAITFORIT_PID     WAITFORIT_RESULT=$?     if [[ $WAITFORIT_RESULT -ne 0 ]]; then         echoerr "$WAITFORIT_cmdname: timeout occurred after waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"     fi     return $WAITFORIT_RESULT }  # process arguments while [[ $# -gt 0 ]] do     case "$1" in         *:* )         WAITFORIT_hostport=(${1//:/ })         WAITFORIT_HOST=${WAITFORIT_hostport[0]}         WAITFORIT_PORT=${WAITFORIT_hostport[1]}         shift 1         ;;         --child)         WAITFORIT_CHILD=1         shift 1         ;;         -q | --quiet)         WAITFORIT_QUIET=1         shift 1         ;;         -s | --strict)         WAITFORIT_STRICT=1         shift 1         ;;         -h)         WAITFORIT_HOST="$2"         if [[ $WAITFORIT_HOST == "" ]]; then break; fi         shift 2         ;;         --host=*)         WAITFORIT_HOST="${1#*=}"         shift 1         ;;         -p)         WAITFORIT_PORT="$2"         if [[ $WAITFORIT_PORT == "" ]]; then break; fi         shift 2         ;;         --port=*)         WAITFORIT_PORT="${1#*=}"         shift 1         ;;         -t)         WAITFORIT_TIMEOUT="$2"         if [[ $WAITFORIT_TIMEOUT == "" ]]; then break; fi         shift 2         ;;         --timeout=*)         WAITFORIT_TIMEOUT="${1#*=}"         shift 1         ;;         --)         shift         WAITFORIT_CLI=("$@")         break         ;;         --help)         usage         ;;         *)         echoerr "Unknown argument: $1"         usage         ;;     esac done  if [[ "$WAITFORIT_HOST" == "" || "$WAITFORIT_PORT" == "" ]]; then     echoerr "Error: you need to provide a host and port to test."     usage fi  WAITFORIT_TIMEOUT=${WAITFORIT_TIMEOUT:-15} WAITFORIT_STRICT=${WAITFORIT_STRICT:-0} WAITFORIT_CHILD=${WAITFORIT_CHILD:-0} WAITFORIT_QUIET=${WAITFORIT_QUIET:-0}  # Check to see if timeout is from busybox? WAITFORIT_TIMEOUT_PATH=$(type -p timeout) WAITFORIT_TIMEOUT_PATH=$(realpath $WAITFORIT_TIMEOUT_PATH 2&gt;/dev/null || readlink -f $WAITFORIT_TIMEOUT_PATH)  WAITFORIT_BUSYTIMEFLAG="" if [[ $WAITFORIT_TIMEOUT_PATH =~ "busybox" ]]; then     WAITFORIT_ISBUSY=1     # Check if busybox timeout uses -t flag     # (recent Alpine versions don't support -t anymore)     if timeout &amp;&gt;/dev/stdout | grep -q -e '-t '; then         WAITFORIT_BUSYTIMEFLAG="-t"     fi else     WAITFORIT_ISBUSY=0 fi  if [[ $WAITFORIT_CHILD -gt 0 ]]; then     wait_for     WAITFORIT_RESULT=$?     exit $WAITFORIT_RESULT else     if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then         wait_for_wrapper         WAITFORIT_RESULT=$?     else         wait_for         WAITFORIT_RESULT=$?     fi fi  if [[ $WAITFORIT_CLI != "" ]]; then     if [[ $WAITFORIT_RESULT -ne 0 &amp;&amp; $WAITFORIT_STRICT -eq 1 ]]; then         echoerr "$WAITFORIT_cmdname: strict mode, refusing to execute subprocess"         exit $WAITFORIT_RESULT     fi     exec "${WAITFORIT_CLI[@]}" else     exit $WAITFORIT_RESULT fi</code></pre> <p>容器启动脚本startup-all.sh，其他只是示例流程，可以一步步完善补充</p> <pre><code class="language-shell">#!/usr/bin/env bash  echo '=====开始安装simple_ecommerce系统环境====='  #echo '=====开始运行mysql=====' #docker-compose -f ../yaml/mysql.yml up -d  #echo '=====开始运行nacos=====' #docker-compose -f ../yaml/nacos.yml up -d #echo '=====nacos正在进行初始化,请等待...=====' #./wait-for-it.sh http://localhost:8848 --timeout=60  -- echo "=====nacos已经准备就绪====="  #echo '=====开始运行rocketmq=====' #docker-compose -f ../yaml/rocketmq.yml up -d  #echo '=====开始运行redis=====' #docker-compose -f ../yaml/redis.yml up -d  #echo '=====开始运行TinyID分布式系统全局ID服务=====' #docker-compose -f ../yaml/tinyid.yml up -d  #echo '=====开始运行ELK=====' #docker-compose -f ../yaml/elk.yml up -d  echo '======================' echo '=====开始运行后台=====' echo '======================'  #echo '=====开始运行ecom-gateway=====' #docker-compose -f ../yaml/ecom-gateway.yml up -d  echo '=====开始运行ecom-storage-service=====' docker-compose -f ../yaml/ecom-storage-service.yml up -d  echo '=====开始运行ecom-order-service=====' docker-compose -f ../yaml/ecom-order-service.yml up -d  echo '执行完成 日志目录: ./log'  echo '======================' echo '=====开始运行前台=====' echo '======================'  #echo '=====开始运行ecom_vue_web=====' #docker-compose -f ../yaml/ecom_vue_web.yml up -d  echo '======================================================' echo '=====所有服务已经启动【请检查是否存在错误启动的】=====' echo '======================================================'</code></pre> <p>容器关闭脚本shutdown-all.sh</p> <pre><code class="language-shell">#!/usr/bin/env bash  echo '=====开始结束运行simple_ecommerce系统服务====='  #echo '=====结束运行mysql=====' #docker-compose -f ../yaml/mysql.yml down  #echo '=====结束运行nacos=====' #docker-compose -f ../yaml/nacos.yml down  #echo '=====结束运行rocketmq=====' #docker-compose -f ../yaml/rocketmq.yml down  #echo '=====结束运行redis=====' #docker-compose -f ../yaml/redis.yml down  #echo '=====结束运行TinyID分布式系统全局ID服务=====' #docker-compose -f ../yaml/tinyid.yml down  #echo '=====结束运行ELK=====' #docker-compose -f ../yaml/elk.yml down  echo '==========================' echo '=====结束后台服务运行=====' echo '=========================='  #echo '=====结束运行ecom-gateway=====' #docker-compose -f ../yaml/ecom-gateway.yml down  echo '=====结束运行ecom-storage-service=====' docker-compose -f ../yaml/ecom-storage-service.yml down  echo '=====结束运行ecom-order-service=====' docker-compose -f ../yaml/ecom-order-service.yml down  echo '==========================' echo '=====结束前台服务运行=====' echo '=========================='  #echo '=====结束运行ecom_vue_web=====' #docker-compose -f ../yaml/ecom_vue_web.yml down  echo '==============================' echo '=====所有服务已经结束运行=====' echo '=============================='</code></pre> <p>更新镜像脚本update.sh，包含关闭容器、下载新的镜像、启动容器</p> <pre><code class="language-shell">#!/usr/bin/env bash  echo '=====开始更新simple_ecommerce系统镜像====='  echo '=====开始关闭运行的容器=====' sh shutdown-all.sh  #echo '=====开始更新ecom-gateway=====' #docker pull registry.itxs.cn/simple_ecommerce/ecom-gateway  echo '=====开始更新ecom-storage-service=====' docker pull registry.itxs.cn/simple_ecommerce/ecom-storage-service  echo '=====开始更新ecom-order-service=====' docker pull registry.itxs.cn/simple_ecommerce/ecom-order-service  #echo '=====开始更新cu_vue_web=====' #docker pull registry.itxs.cn/simple_ecommerce/ecom_vue_web  echo '=====删除docker标签为none的镜像=====' docker images | grep none | awk '{print $3}' | xargs docker rmi  echo '=====开始运行的一键部署脚本=====' sh startup-all.sh</code></pre> <h2 id="执行测试">执行测试</h2> <pre><code class="language-shell"># 进入到bin目录下，由于我这里本地有镜像，少了pull流程 sh ./init.sh</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/030dc55190e14de01089c828c1e1137e.jpg" alt="SpringCloudAlibaba微服务docker容器打包和部署示例实战"></p> <p>查看容器运行情况，容器正常运行</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c337aa301e56f4b98376eca7568dc1b2.jpg" alt="SpringCloudAlibaba微服务docker容器打包和部署示例实战"></p> <p>查看nacos服务的注册信息</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b18fa0e4c6feee21d38182c0003b94e2.jpg" alt="SpringCloudAlibaba微服务docker容器打包和部署示例实战"></p> <p>访问订单接口http://192.168.50.95:4070/create/1001/1001/3 ，返回成功结果</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6fc5a65014420429e78db06c1ef8bd6e.jpg" alt="SpringCloudAlibaba微服务docker容器打包和部署示例实战"></p> <p>查看订单表和库存表的数据都已更新，至此部署完毕</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c5c302ee239e835572e4cf40b6857cfd.jpg" alt="SpringCloudAlibaba微服务docker容器打包和部署示例实战"></p> <p></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-86052.htm">宠物猫疫苗多久打一次（宠物猫疫苗多久打一次最好）</a></p>
                                        <p>下一个：<a href="/news/article-86758.htm">哪里可以领养宠物狗（哪里可以领养犬）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-88187.htm" title="领养宠物需要给钱吗知乎（领养宠物要给红包吗）">领养宠物需要给钱吗知乎（领养宠物要给红包吗）</a></li>
                        <li class="py-2"><a href="/news/article-67042.htm" title="动物疫苗可以快递吗安全吗知乎（动物疫苗可以去畜牧局批发吗）">动物疫苗可以快递吗安全吗知乎（动物疫苗可以去畜牧局批发吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-2-free-shadowrocket-node.htm" title="4月2日|最高速度19.8M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐">4月2日|最高速度19.8M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-86052.htm" title="宠物猫疫苗多久打一次（宠物猫疫苗多久打一次最好）">宠物猫疫苗多久打一次（宠物猫疫苗多久打一次最好）</a></li>
                        <li class="py-2"><a href="/news/article-65768.htm" title="springboot-autoConfiguration原理">springboot-autoConfiguration原理</a></li>
                        <li class="py-2"><a href="/news/article-74920.htm" title="关于MySQL92和99 等值连接、非等值连接、自连接、外连接及多表查询的代码示例总结！">关于MySQL92和99 等值连接、非等值连接、自连接、外连接及多表查询的代码示例总结！</a></li>
                        <li class="py-2"><a href="/news/article-76953.htm" title="设计模式之：享元模式FlyweightPattern的实现">设计模式之：享元模式FlyweightPattern的实现</a></li>
                        <li class="py-2"><a href="/news/article-86756.htm" title="SpringCloudAlibaba微服务docker容器打包和部署示例实战">SpringCloudAlibaba微服务docker容器打包和部署示例实战</a></li>
                        <li class="py-2"><a href="/news/article-80368.htm" title="检测IP地址的正则表达式">检测IP地址的正则表达式</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-17-shadowrocket-node.htm" title="3月17日|最高速度19.6M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐">3月17日|最高速度19.6M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div> <!-- end of container -->
    </div> <!-- end of basic-1 -->
    <!-- end of details 1 -->
    
        <!-- Copyright -->
    <div class="copyright bg-gray">
        <div class="container">
            <div class="row">
                <div class="col-lg-6">
                    <ul class="list-unstyled li-space-lg p-small">
                        <li><a href="#">Article Details</a></li>
                        <li><a href="#">Terms & Conditions</a></li>
                        <li><a href="#">Privacy Policy</a></li>
                    </ul>
                </div> <!-- end of col -->
                <div class="col-lg-6">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p>
                        <a href="/">Hysteria2官网订阅站</a> 版权所有 Powered by WordPress
                    </p>
                </div> <!-- end of col -->
            </div> <!-- enf of row -->
        </div> <!-- end of container -->
    </div> <!-- end of copyright -->
    <!-- end of copyright -->
    <!-- Back To Top Button -->
    <button onclick="topFunction()" id="myBtn">
        <img src="/assets/website/img/hysteria2/up-arrow.png" alt="alternative">
    </button>
    <!-- end of back to top button -->
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/hysteria2/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2/bootstrap.min.js"></script> <!-- Bootstrap framework -->
    <script src="/assets/website/js/frontend/hysteria2/swiper.min.js"></script> <!-- Swiper for image and text sliders -->
    <script src="/assets/website/js/frontend/hysteria2/purecounter.min.js"></script> <!-- Purecounter counter for statistics numbers -->
    <script src="/assets/website/js/frontend/hysteria2/isotope.pkgd.min.js"></script> <!-- Isotope for filter -->
    <script src="/assets/website/js/frontend/hysteria2/scripts.js"></script> <!-- Custom scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>