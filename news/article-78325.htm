<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hysteria2.github.io/news/article-78325.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <!-- Webpage Title -->
    <title>Redis分布式锁实现原理</title>
        <meta name="description" content="1、pom.xml导入依赖  &lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifact" />
        <link rel="icon" href="/assets/website/img/hysteria2/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Hysteria2官网订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hysteria2.github.io/news/article-78325.htm" />
    <meta property="og:site_name" content="Hysteria2官网订阅站" />
    <meta property="og:title" content="Redis分布式锁实现原理" />
    <meta property="og:image" content="https://hysteria2.github.io/uploads/20240507/52a708e82341c2550fa66ad494dfee44.webp" />
        <meta property="og:release_date" content="2025-03-21T10:30:20" />
    <meta property="og:updated_time" content="2025-03-21T10:30:20" />
        <meta property="og:description" content="1、pom.xml导入依赖  &lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifact" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Redis分布式锁实现原理">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/fontawesome-all.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/swiper.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/styles.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0LQ0YHE09L"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0LQ0YHE09L');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-bs-spy="scroll" data-bs-target="#navbarExample" data-page="detail">
        <!-- Navigation -->
    <nav id="navbarExample" class="navbar navbar-expand-lg fixed-top navbar-light" aria-label="Main navigation">
        <div class="container">
            <!-- Image Logo -->
            <a class="navbar-brand logo-image" href="/">
                            <span>Hysteria2</span>
                        </a>
            <!-- Text Logo - Use this if you don't have a graphic logo -->
            <!-- <a class="navbar-brand logo-text" href="index.html">Zinc</a> -->
            <button class="navbar-toggler p-0 border-0" type="button" id="navbarSideCollapse" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse offcanvas-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav ms-auto navbar-nav-scroll">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div> <!-- end of navbar-collapse -->
        </div> <!-- end of container -->
    </nav> <!-- end of navbar -->
    <!-- end of navigation -->
    <!-- Header -->
    <header class="ex-header">
        <div class="container">
            <div class="row">
                <div class="col-xl-10 offset-xl-1">
                    <h1>Redis分布式锁实现原理</h1>
                    <div class="section-title">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </div>
                </div> <!-- end of col -->
            </div> <!-- end of row -->
        </div> <!-- end of container -->
    </header> <!-- end of ex-header -->
    <!-- end of header -->
    <!-- Details 1 -->
    <div id="details" class="basic-1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p><span data-cke-copybin-start="1"><span data-cke-copybin-start="1"></span></span></p> </h1> <p>1、pom.xml导入依赖</p> <div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="7" data-cke-widget-wrapper="1"> <pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22XML%22%2C%22code%22%3A%22%3Cdependency%3E%5Cn%5Ct%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%5Ct%3CartifactId%3Espring-boot-starter-integration%3C%2FartifactId%3E%5Cn%3C%2Fdependency%3E%5Cn%3Cdependency%3E%5Cn%5Ct%3CgroupId%3Eorg.springframework.integration%3C%2FgroupId%3E%5Cn%5Ct%3CartifactId%3Espring-integration-redis%3C%2FartifactId%3E%5Cn%3C%2Fdependency%3E%5Cn%3Cdependency%3E%5Cn%5Ct%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%5Ct%3CartifactId%3Espring-boot-starter-data-redis%3C%2FartifactId%3E%5Cn%3C%2Fdependency%3E%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-XML hljs"><span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;<span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;<span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;spring-boot-starter-integration<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;<span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;<span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.springframework.integration<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;<span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;spring-integration-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;<span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;<span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;<span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> <p><span class="cke_reset cke_widget_drag_handler_container"><img decoding="async" src="https://img2022.cnblogs.com/blog/1453965/202204/1453965-20220403172827774-1280476727.gif" alt="Redis分布式锁实现原理" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"/></span></div> <p>2、配置文件</p> <div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="6" data-cke-widget-wrapper="1"> <pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cnpublic%20class%20RedissonConfig%20%7B%5Cn%5Cn%5Ct%2F%2F%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9C%A8yml%E6%88%96properties%E6%96%87%E4%BB%B6%E4%B8%AD%5Cn%5Ct%40Value(%5C%22%24%7Bspring.redis.host%7D%5C%22)%5Cn%5Ctprivate%20String%20host%3B%5Cn%5Cn%5Ct%40Value(%5C%22%24%7Bspring.redis.port%7D%5C%22)%5Cn%5Ctprivate%20String%20port%3B%5Cn%5Cn%5Ct%40Value(%5C%22%24%7Bspring.redis.password%7D%5C%22)%5Cn%5Ctprivate%20String%20password%3B%5Cn%5Cn%5Ct%40Bean%5Cn%5Ctpublic%20RedissonClient%20getRedisson()%20%7B%5Cn%5Ct%5CtConfig%20config%20%3D%20new%20Config()%3B%5Cn%5Ct%5Ctif%20(StringUtils.isBlank(password))%20%7B%5Cn%5Ct%5Ct%5Ctconfig.useSingleServer().setAddress(%5C%22redis%3A%2F%2F%5C%22%20%2B%20host%20%2B%20%5C%22%3A%5C%22%20%2B%20port)%3B%5Cn%5Ct%5Ct%7D%20else%20%7B%5Cn%5Ct%5Ct%5Ctconfig.useSingleServer().setAddress(%5C%22redis%3A%2F%2F%5C%22%20%2B%20host%20%2B%20%5C%22%3A%5C%22%20%2B%20port).setPassword(password)%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%5Ctreturn%20Redisson.create(config)%3B%5Cn%5Ct%7D%5Cn%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-meta">@Configuration<span class="hljs-keyword">public<span class="hljs-keyword">class<span class="hljs-title class_">RedissonConfig {<span class="hljs-comment">// 自定义在yml或properties文件中<span class="hljs-meta">@Value("${spring.redis.host}")<span class="hljs-keyword">private String host;<span class="hljs-meta">@Value("${spring.redis.port}")<span class="hljs-keyword">private String port;<span class="hljs-meta">@Value("${spring.redis.password}")<span class="hljs-keyword">private String password;<span class="hljs-meta">@Bean<span class="hljs-keyword">public RedissonClient<span class="hljs-title function_">getRedisson<span class="hljs-params">() {<span class="hljs-type">Config<span class="hljs-variable">config<span class="hljs-operator">=<span class="hljs-keyword">new<span class="hljs-title class_">Config();<span class="hljs-keyword">if (StringUtils.isBlank(password)) { 			config.useSingleServer().setAddress(<span class="hljs-string">"redis://" + host +<span class="hljs-string">":" + port); 		}<span class="hljs-keyword">else { 			config.useSingleServer().setAddress(<span class="hljs-string">"redis://" + host +<span class="hljs-string">":" + port).setPassword(password); 		}<span class="hljs-keyword">return Redisson.create(config); 	}  }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> <p><span class="cke_reset cke_widget_drag_handler_container"><img decoding="async" src="https://img2022.cnblogs.com/blog/1453965/202204/1453965-20220403172827774-1280476727.gif" alt="Redis分布式锁实现原理" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"/></span></div> <p>3、使用类</p> <div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="5" data-cke-widget-wrapper="1"> <pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22import%20org.slf4j.Logger%3B%5Cnimport%20org.slf4j.LoggerFactory%3B%5Cnimport%20org.springframework.beans.factory.annotation.Autowired%3B%5Cnimport%20org.springframework.integration.redis.util.RedisLockRegistry%3B%5Cn%5Cnimport%20java.util.concurrent.TimeUnit%3B%5Cnimport%20java.util.concurrent.locks.Lock%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20Forlan%5Cn%20*%20%40since%202022-04-03%5Cn%20*%2F%5Cnpublic%20class%20ForlanTest%20%7B%5Cn%5Cn%5Ctprivate%20static%20final%20Logger%20logger%20%3D%20LoggerFactory.getLogger(ForlanTest.class)%3B%5Cn%5Cn%5Ct%40Autowired%5Cn%5Ctprivate%20RedisLockRegistry%20redisLockRegistry%3B%5Cn%5Cn%5Ctpublic%20void%20test()%20%7B%5Cn%5Ct%5CtString%20lockKey%20%3D%20%5C%22key_id%5C%22%3B%5Cn%5Ct%5CtLock%20loginLock%20%3D%20redisLockRegistry.obtain(lockKey.intern())%3B%5Cn%5Ct%5Ctboolean%20getLock%20%3D%20false%3B%5Cn%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ct%2F%2F%20tryLock()%E5%BA%95%E5%B1%82%E8%B0%83%E7%94%A8this.tryLock(0L%2C%20TimeUnit.MILLISECONDS)%5Cn%5Ct%5Ct%5CtgetLock%20%3D%20loginLock.tryLock(5%2C%20TimeUnit.SECONDS)%3B%5Cn%5Ct%5Ct%5Ctif%20(getLock)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%2F%2F%E8%8E%B7%E5%BE%97%E9%94%81%E6%89%A7%E8%A1%8C%E4%B8%9A%E5%8A%A1%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%20catch%20(Exception%20e)%20%7B%5Cn%5Ct%5Ct%5Ctlogger.error(%5C%22%E5%BC%82%E5%B8%B8%E4%BF%A1%E6%81%AF...%5C%22%2C%20e)%3B%5Cn%5Ct%5Ct%7D%20finally%20%7B%5Cn%5Ct%5Ct%5Ctif%20(getLock)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%2F%2F%E9%87%8A%E6%94%BE%E9%94%81%5Cn%5Ct%5Ct%5Ct%5CtloginLock.unlock()%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-keyword">import org.slf4j.Logger;<span class="hljs-keyword">import org.slf4j.LoggerFactory;<span class="hljs-keyword">import org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import org.springframework.integration.redis.util.RedisLockRegistry;<span class="hljs-keyword">import java.util.concurrent.TimeUnit;<span class="hljs-keyword">import java.util.concurrent.locks.Lock;<span class="hljs-comment">/**  *<span class="hljs-doctag">@author Forlan  *<span class="hljs-doctag">@since 2022-04-03  */<span class="hljs-keyword">public<span class="hljs-keyword">class<span class="hljs-title class_">ForlanTest {<span class="hljs-keyword">private<span class="hljs-keyword">static<span class="hljs-keyword">final<span class="hljs-type">Logger<span class="hljs-variable">logger<span class="hljs-operator">= LoggerFactory.getLogger(ForlanTest.class);<span class="hljs-meta">@Autowired<span class="hljs-keyword">private RedisLockRegistry redisLockRegistry;<span class="hljs-keyword">public<span class="hljs-keyword">void<span class="hljs-title function_">test<span class="hljs-params">() {<span class="hljs-type">String<span class="hljs-variable">lockKey<span class="hljs-operator">=<span class="hljs-string">"key_id";<span class="hljs-type">Lock<span class="hljs-variable">loginLock<span class="hljs-operator">= redisLockRegistry.obtain(lockKey.intern());<span class="hljs-type">boolean<span class="hljs-variable">getLock<span class="hljs-operator">=<span class="hljs-literal">false;<span class="hljs-keyword">try {<span class="hljs-comment">// tryLock()底层调用this.tryLock(0L, TimeUnit.MILLISECONDS) 			getLock = loginLock.tryLock(<span class="hljs-number">5, TimeUnit.SECONDS);<span class="hljs-keyword">if (getLock) {<span class="hljs-comment">//获得锁执行业务 			} 		}<span class="hljs-keyword">catch (Exception e) { 			logger.error(<span class="hljs-string">"异常信息...", e); 		}<span class="hljs-keyword">finally {<span class="hljs-keyword">if (getLock) {<span class="hljs-comment">//释放锁 				loginLock.unlock(); 			} 		} 	} }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> <p><span class="cke_reset cke_widget_drag_handler_container"><img decoding="async" src="https://img2022.cnblogs.com/blog/1453965/202204/1453965-20220403172827774-1280476727.gif" alt="Redis分布式锁实现原理" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"/></span></div> </h1> <h2>obtain方法</h2> <div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="4" data-cke-widget-wrapper="1"> <pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22private%20final%20Map%3CString%2C%20RedisLockRegistry.RedisLock%3E%20locks%3B%5Cn%5Cnprivate%20final%20class%20RedisLock%20implements%20Lock%20%7B%5Cn%5Ctprivate%20final%20String%20lockKey%3B%5Cn%5Ctprivate%20final%20ReentrantLock%20localLock%3B%5Cn%5Ctprivate%20volatile%20long%20lockedAt%3B%5Cn%5Cn%5Ctprivate%20RedisLock(String%20path)%20%7B%5Cn%5Ct%5Ctthis.localLock%20%3D%20new%20ReentrantLock()%3B%5Cn%5Ct%5Ctthis.lockKey%20%3D%20this.constructLockKey(path)%3B%5Cn%5Ct%7D%5Cn%7D%5Cn%5Cnpublic%20Lock%20obtain(Object%20lockKey)%20%7B%5Cn%20%20%20%20Assert.isInstanceOf(String.class%2C%20lockKey)%3B%5Cn%20%20%20%20String%20path%20%3D%20(String)lockKey%3B%5Cn%20%20%20%20return%20(Lock)this.locks.computeIfAbsent(path%2C%20(x%240)%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20RedisLockRegistry.RedisLock(x%240)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-keyword">private<span class="hljs-keyword">final Map&lt;String, RedisLockRegistry.RedisLock&gt; locks;<span class="hljs-keyword">private<span class="hljs-keyword">final<span class="hljs-keyword">class<span class="hljs-title class_">RedisLock<span class="hljs-keyword">implements<span class="hljs-title class_">Lock {<span class="hljs-keyword">private<span class="hljs-keyword">final String lockKey;<span class="hljs-keyword">private<span class="hljs-keyword">final ReentrantLock localLock;<span class="hljs-keyword">private<span class="hljs-keyword">volatile<span class="hljs-type">long lockedAt;<span class="hljs-keyword">private<span class="hljs-title function_">RedisLock<span class="hljs-params">(String path) {<span class="hljs-built_in">this.localLock =<span class="hljs-keyword">new<span class="hljs-title class_">ReentrantLock();<span class="hljs-built_in">this.lockKey =<span class="hljs-built_in">this.constructLockKey(path); 	} }<span class="hljs-keyword">public Lock<span class="hljs-title function_">obtain<span class="hljs-params">(Object lockKey) {     Assert.isInstanceOf(String.class, lockKey);<span class="hljs-type">String<span class="hljs-variable">path<span class="hljs-operator">= (String)lockKey;<span class="hljs-keyword">return (Lock)<span class="hljs-built_in">this.locks.computeIfAbsent(path, (x$<span class="hljs-number">0) -&gt; {<span class="hljs-keyword">return<span class="hljs-keyword">new<span class="hljs-title class_">RedisLockRegistry.RedisLock(x$<span class="hljs-number">0);     }); }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> <p><span class="cke_reset cke_widget_drag_handler_container"><img decoding="async" src="https://img2022.cnblogs.com/blog/1453965/202204/1453965-20220403172827774-1280476727.gif" alt="Redis分布式锁实现原理" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"/></span></div> <p>主要是根据lockKey去查locks这个map中是否已经存在这个key<br /> 如果存在就返回内部类RedisLock<br /> 如果不存在就创建一个RedisLock，以lockKey为key，RedisLock为value放入map中</p> <p>备注：每个分布式应用自己都会创建一个RedisLockRegistry实例，同一个应用的多个线程共享RedisLock类</p> <h2>tryLock方法</h2> <div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="3" data-cke-widget-wrapper="1"> <pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22public%20boolean%20tryLock(long%20time%2C%20TimeUnit%20unit)%20throws%20InterruptedException%20%7B%5Cn%5Ctlong%20now%20%3D%20System.currentTimeMillis()%3B%5Cn%5Ct%2F%2F%20%E5%B0%9D%E8%AF%95%E6%8B%BF%E5%8F%96%E6%9C%AC%E5%9C%B0%E9%94%81%5Cn%5Ctif%20(!this.localLock.tryLock(time%2C%20unit))%20%7B%5Cn%5Ct%5Ctreturn%20false%3B%5Cn%5Ct%7D%20else%20%7B%5Cn%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ctlong%20expire%20%3D%20now%20%2B%20TimeUnit.MILLISECONDS.convert(time%2C%20unit)%3B%5Cn%5Cn%5Ct%5Ct%5Ctboolean%20acquired%3B%5Cn%5Ct%5Ct%5Ct%2F%2F%20%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E8%BF%98%E6%B2%A1%E8%BF%87%E6%9C%9F%E5%B9%B6%E4%B8%94%E8%BF%98%E6%9C%AA%E8%8E%B7%E5%BE%97redis%E9%94%81%EF%BC%8C%E7%9D%A1%E7%9C%A0100ms%E7%BB%A7%E7%BB%AD%E9%87%8D%E8%AF%95%5Cn%5Ct%5Ct%5Ctwhile(!(acquired%20%3D%20this.obtainLock())%20%26%26%20System.currentTimeMillis()%20%3C%20expire)%20%7B%5Cn%5Ct%5Ct%5Ct%5CtThread.sleep(100L)%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Cn%5Ct%5Ct%5Ctif%20(!acquired)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctthis.localLock.unlock()%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Cn%5Ct%5Ct%5Ctreturn%20acquired%3B%5Cn%5Ct%5Ct%7D%20catch%20(Exception%20var9)%20%7B%5Cn%5Ct%5Ct%5Ctthis.localLock.unlock()%3B%5Cn%5Ct%5Ct%5Ctthis.rethrowAsLockException(var9)%3B%5Cn%5Ct%5Ct%5Ctreturn%20false%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-keyword">public<span class="hljs-type">boolean<span class="hljs-title function_">tryLock<span class="hljs-params">(<span class="hljs-type">long time, TimeUnit unit)<span class="hljs-keyword">throws InterruptedException {<span class="hljs-type">long<span class="hljs-variable">now<span class="hljs-operator">= System.currentTimeMillis();<span class="hljs-comment">// 尝试拿取本地锁<span class="hljs-keyword">if (!<span class="hljs-built_in">this.localLock.tryLock(time, unit)) {<span class="hljs-keyword">return<span class="hljs-literal">false; 	}<span class="hljs-keyword">else {<span class="hljs-keyword">try {<span class="hljs-type">long<span class="hljs-variable">expire<span class="hljs-operator">= now + TimeUnit.MILLISECONDS.convert(time, unit);<span class="hljs-type">boolean acquired;<span class="hljs-comment">// 当前时间还没过期并且还未获得redis锁，睡眠100ms继续重试<span class="hljs-keyword">while(!(acquired =<span class="hljs-built_in">this.obtainLock()) &amp;&amp; System.currentTimeMillis() &lt; expire) { 				Thread.sleep(<span class="hljs-number">100L); 			}<span class="hljs-keyword">if (!acquired) {<span class="hljs-built_in">this.localLock.unlock(); 			}<span class="hljs-keyword">return acquired; 		}<span class="hljs-keyword">catch (Exception var9) {<span class="hljs-built_in">this.localLock.unlock();<span class="hljs-built_in">this.rethrowAsLockException(var9);<span class="hljs-keyword">return<span class="hljs-literal">false; 		} 	} }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> <p><span class="cke_reset cke_widget_drag_handler_container"><img decoding="async" src="https://img2022.cnblogs.com/blog/1453965/202204/1453965-20220403172827774-1280476727.gif" alt="Redis分布式锁实现原理" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"/></span></div> <h3>主要过程</h3> <p>先获得本地锁，拿不到直接返回失败<br /> 当前时间还没过期并且还没拿到redis锁，睡眠100ms继续重试</p> <p>如果拿到redis锁，结束循环，返回成功</p> <p>如果超时了还没拿到，释放锁，返回失败</p> <h3>拿redis锁的过程</h3> <div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="2" data-cke-widget-wrapper="1"> <pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22private%20boolean%20obtainLock()%20%7B%5Cn%5Ctboolean%20success%20%3D%20(Boolean)RedisLockRegistry.this.redisTemplate.execute(RedisLockRegistry.this.obtainLockScript%2C%20Collections.singletonList(this.lockKey)%2C%20new%20Object%5B%5D%7BRedisLockRegistry.this.clientId%2C%20String.valueOf(RedisLockRegistry.this.expireAfter)%7D)%3B%5Cn%5Ctif%20(success)%20%7B%5Cn%5Ct%5Ctthis.lockedAt%20%3D%20System.currentTimeMillis()%3B%5Cn%5Ct%7D%5Cn%5Cn%5Ctreturn%20success%3B%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">private boolean obtainLock() { 	boolean success = (Boolean)RedisLockRegistry.this.redisTemplate.execute(RedisLockRegistry.this.obtainLockScript, Collections.singletonList(this.lockKey), new Object[]{RedisLockRegistry.this.clientId, String.valueOf(RedisLockRegistry.this.expireAfter)}); 	if (success) { 		this.lockedAt = System.currentTimeMillis(); 	}  	return success; }</code></pre> <p><span class="cke_reset cke_widget_drag_handler_container"><img decoding="async" src="https://img2022.cnblogs.com/blog/1453965/202204/1453965-20220403172827774-1280476727.gif" alt="Redis分布式锁实现原理" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"/></span></div> <p>通过obtainLock方法，执行lua脚本来获取</p> <p>redisTemplate.execute()参数说明：</p> <p>第一个obtainLockScript参数就是要执行的lua脚本；</p> <div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="1" data-cke-widget-wrapper="1"> <pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22XML%22%2C%22code%22%3A%22local%20lockClientId%20%3D%20redis.call('GET'%2C%20KEYS%5B1%5D)%5Cnif%20lockClientId%20%3D%3D%20ARGV%5B1%5D%20then%5Cn%20%20redis.call('PEXPIRE'%2C%20KEYS%5B1%5D%2C%20ARGV%5B2%5D)%5Cn%20%20return%20true%5Cnelseif%20not%20lockClientId%20then%5Cn%20%20redis.call('SET'%2C%20KEYS%5B1%5D%2C%20ARGV%5B1%5D%2C%20'PX'%2C%20ARGV%5B2%5D)%5Cn%20%20return%20true%5Cnend%5Cnreturn%20false%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-XML hljs">local lockClientId = redis.call('GET', KEYS[1]) if lockClientId == ARGV[1] then   redis.call('PEXPIRE', KEYS[1], ARGV[2])   return true elseif not lockClientId then   redis.call('SET', KEYS[1], ARGV[1], 'PX', ARGV[2])   return true end return false</code></pre> <p><span class="cke_reset cke_widget_drag_handler_container"><img decoding="async" src="https://img2022.cnblogs.com/blog/1453965/202204/1453965-20220403172827774-1280476727.gif" alt="Redis分布式锁实现原理" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"/></span></div> <p>第二个参数就是表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用1为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)；</p> <p>第三个参是附加参数 arg [arg …] ，可以在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)</p> <h3>为什么要用本地锁</h3> <ul> <li>为了可重入</li> <li>为了减轻redis服务器的压力</li> </ul> <h3>为什么要用lua脚本</h3> <ul> <li>保证原子性</li> <li>减少网络开销</li> <li>替代redis的事务功能</li> </ul> <h2>unlock方法</h2> <div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="0" data-cke-widget-wrapper="1"> <pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22public%20void%20unlock()%20%7B%5Cn%20%20%20%20if%20(!this.localLock.isHeldByCurrentThread())%20%7B%5Cn%20%20%20%20%20%20%20%20throw%20new%20IllegalStateException(%5C%22You%20do%20not%20own%20lock%20at%20%5C%22%20%2B%20this.lockKey)%3B%5Cn%20%20%20%20%7D%20else%20if%20(this.localLock.getHoldCount()%20%3E%201)%20%7B%5Cn%20%20%20%20%20%20%20%20this.localLock.unlock()%3B%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(Thread.currentThread().isInterrupted())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20RedisLockRegistry.this.executor.execute(this%3A%3AremoveLockKey)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.removeLockKey()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(RedisLockRegistry.logger.isDebugEnabled())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20RedisLockRegistry.logger.debug(%5C%22Released%20lock%3B%20%5C%22%20%2B%20this)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20var5)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ReflectionUtils.rethrowRuntimeException(var5)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20finally%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.localLock.unlock()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-keyword">public<span class="hljs-keyword">void<span class="hljs-title function_">unlock<span class="hljs-params">() {<span class="hljs-keyword">if (!<span class="hljs-built_in">this.localLock.isHeldByCurrentThread()) {<span class="hljs-keyword">throw<span class="hljs-keyword">new<span class="hljs-title class_">IllegalStateException(<span class="hljs-string">"You do not own lock at " +<span class="hljs-built_in">this.lockKey);     }<span class="hljs-keyword">else<span class="hljs-keyword">if (<span class="hljs-built_in">this.localLock.getHoldCount() &gt;<span class="hljs-number">1) {<span class="hljs-built_in">this.localLock.unlock();     }<span class="hljs-keyword">else {<span class="hljs-keyword">try {<span class="hljs-keyword">if (Thread.currentThread().isInterrupted()) {                 RedisLockRegistry.<span class="hljs-built_in">this.executor.execute(<span class="hljs-built_in">this::removeLockKey);             }<span class="hljs-keyword">else {<span class="hljs-built_in">this.removeLockKey();             }<span class="hljs-keyword">if (RedisLockRegistry.logger.isDebugEnabled()) {                 RedisLockRegistry.logger.debug(<span class="hljs-string">"Released lock; " +<span class="hljs-built_in">this);             }         }<span class="hljs-keyword">catch (Exception var5) {             ReflectionUtils.rethrowRuntimeException(var5);         }<span class="hljs-keyword">finally {<span class="hljs-built_in">this.localLock.unlock();         }     } }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> <p><span class="cke_reset cke_widget_drag_handler_container"><img decoding="async" src="https://img2022.cnblogs.com/blog/1453965/202204/1453965-20220403172827774-1280476727.gif" alt="Redis分布式锁实现原理" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"/></span></div> <p>释放锁的过程<br /> 1、判断是否是当前线程持有锁，如果不是，抛异常（本地锁）<br /> 2、判断当前线程持有锁的计数<br /> 如果当前线程持有锁的计数 &gt; 1，说明本地锁被当前线程多次获取，这时只会释放本地锁，释放之后当前线程持有锁的计数-1。<br /> 否则，释放本地锁和redis锁。</p> <p><span data-cke-copybin-start="1"><span data-cke-copybin-end="1"></span></span></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-78324.htm">win11系统记事本打不开如何解决</a></p>
                                        <p>下一个：<a href="/news/article-79018.htm">QtWebEngine性能问题_在线工具</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-71603.htm" title="动物疫苗厂家排名榜单前十 动物疫苗厂家排名榜单前十名">动物疫苗厂家排名榜单前十 动物疫苗厂家排名榜单前十名</a></li>
                        <li class="py-2"><a href="/news/article-41492.htm" title="宠物领养平台创业计划书（宠物领养网站的设计与实现）">宠物领养平台创业计划书（宠物领养网站的设计与实现）</a></li>
                        <li class="py-2"><a href="/news/article-79018.htm" title="QtWebEngine性能问题_在线工具">QtWebEngine性能问题_在线工具</a></li>
                        <li class="py-2"><a href="/news/article-42980.htm" title="免费宠物领养平台哪个好（免费宠物领养平台哪个好一点）">免费宠物领养平台哪个好（免费宠物领养平台哪个好一点）</a></li>
                        <li class="py-2"><a href="/news/article-72271.htm" title="益宠宠物医院官方店 益宠宠物医院官方店铺">益宠宠物医院官方店 益宠宠物医院官方店铺</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-3-clash-node.htm" title="2月3日|最高速度21.3M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐">2月3日|最高速度21.3M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-6-free-clash-subscribe.htm" title="2月6日|最高速度18.4M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐">2月6日|最高速度18.4M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-59786.htm" title="100个做电商90个亏（没有货源如何做电商）">100个做电商90个亏（没有货源如何做电商）</a></li>
                        <li class="py-2"><a href="/news/article-72918.htm" title="生物疫苗和动物疫苗的区别是什么（生物疫苗一样吗）">生物疫苗和动物疫苗的区别是什么（生物疫苗一样吗）</a></li>
                        <li class="py-2"><a href="/news/article-74920.htm" title="关于MySQL92和99 等值连接、非等值连接、自连接、外连接及多表查询的代码示例总结！">关于MySQL92和99 等值连接、非等值连接、自连接、外连接及多表查询的代码示例总结！</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">66</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div> <!-- end of container -->
    </div> <!-- end of basic-1 -->
    <!-- end of details 1 -->
    
        <!-- Copyright -->
    <div class="copyright bg-gray">
        <div class="container">
            <div class="row">
                <div class="col-lg-6">
                    <ul class="list-unstyled li-space-lg p-small">
                        <li><a href="#">Article Details</a></li>
                        <li><a href="#">Terms & Conditions</a></li>
                        <li><a href="#">Privacy Policy</a></li>
                    </ul>
                </div> <!-- end of col -->
                <div class="col-lg-6">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        <a href="/">Hysteria2官网订阅站</a> 版权所有 Powered by WordPress
                    </p>
                </div> <!-- end of col -->
            </div> <!-- enf of row -->
        </div> <!-- end of container -->
    </div> <!-- end of copyright -->
    <!-- end of copyright -->
    <!-- Back To Top Button -->
    <button onclick="topFunction()" id="myBtn">
        <img src="/assets/website/img/hysteria2/up-arrow.png" alt="alternative">
    </button>
    <!-- end of back to top button -->
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/hysteria2/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2/bootstrap.min.js"></script> <!-- Bootstrap framework -->
    <script src="/assets/website/js/frontend/hysteria2/swiper.min.js"></script> <!-- Swiper for image and text sliders -->
    <script src="/assets/website/js/frontend/hysteria2/purecounter.min.js"></script> <!-- Purecounter counter for statistics numbers -->
    <script src="/assets/website/js/frontend/hysteria2/isotope.pkgd.min.js"></script> <!-- Isotope for filter -->
    <script src="/assets/website/js/frontend/hysteria2/scripts.js"></script> <!-- Custom scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>