<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hysteria2.github.io/news/article-65768.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <!-- Webpage Title -->
    <title>springboot-autoConfiguration原理</title>
        <meta name="description" content="springboot自动配置的原理，基于springboot 2.1.5.RELEASE版本 这里是示例工程. 闲话不说，先来看看主类。 @SpringBootApplication public c" />
        <link rel="icon" href="/assets/website/img/hysteria2/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Hysteria2官网订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hysteria2.github.io/news/article-65768.htm" />
    <meta property="og:site_name" content="Hysteria2官网订阅站" />
    <meta property="og:title" content="springboot-autoConfiguration原理" />
    <meta property="og:image" content="https://hysteria2.github.io/uploads/20240507/467b391c1d6ed8c3150eb03065ccd878.webp" />
        <meta property="og:release_date" content="2025-03-02T09:37:07" />
    <meta property="og:updated_time" content="2025-03-02T09:37:07" />
        <meta property="og:description" content="springboot自动配置的原理，基于springboot 2.1.5.RELEASE版本 这里是示例工程. 闲话不说，先来看看主类。 @SpringBootApplication public c" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="springboot-autoConfiguration原理">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/fontawesome-all.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/swiper.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/styles.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0LQ0YHE09L"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0LQ0YHE09L');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-bs-spy="scroll" data-bs-target="#navbarExample" data-page="detail">
        <!-- Navigation -->
    <nav id="navbarExample" class="navbar navbar-expand-lg fixed-top navbar-light" aria-label="Main navigation">
        <div class="container">
            <!-- Image Logo -->
            <a class="navbar-brand logo-image" href="/">
                            <span>Hysteria2</span>
                        </a>
            <!-- Text Logo - Use this if you don't have a graphic logo -->
            <!-- <a class="navbar-brand logo-text" href="index.html">Zinc</a> -->
            <button class="navbar-toggler p-0 border-0" type="button" id="navbarSideCollapse" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse offcanvas-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav ms-auto navbar-nav-scroll">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div> <!-- end of navbar-collapse -->
        </div> <!-- end of container -->
    </nav> <!-- end of navbar -->
    <!-- end of navigation -->
    <!-- Header -->
    <header class="ex-header">
        <div class="container">
            <div class="row">
                <div class="col-xl-10 offset-xl-1">
                    <h1>springboot-autoConfiguration原理</h1>
                    <div class="section-title">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </div>
                </div> <!-- end of col -->
            </div> <!-- end of row -->
        </div> <!-- end of container -->
    </header> <!-- end of ex-header -->
    <!-- end of header -->
    <!-- Details 1 -->
    <div id="details" class="basic-1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <div class="content" id="articleContent"> <blockquote> </h1> </blockquote> <p><strong>springboot自动配置的原理，基于springboot 2.1.5.RELEASE版本</strong> <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/wt123/learn/tree/master/springboot_source_learn"  title="示例工程" rel="nofollow">这里是示例工程</a>.</p> <p>闲话不说，先来看看主类。</p> <pre><code class="language-java">@SpringBootApplication public class BootStartMain {     public static void main(String[] args) {         SpringApplication app = new SpringApplication(BootStartMain.class);         app.setBanner(new ResourceBanner(new ClassPathResource("banner.txt"))); 		app.run(args); 	} } </code></pre> <p>上一篇<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://my.oschina.net/wtkid/blog/3079375"  title="springboot的启动流程" rel="nofollow">springboot的启动流程</a>分析了run方法的逻辑，阐述了springboot的启动流程，最后在load资源的时候，主类以bean的形式被注册到了bean当中，而在之前部分我们也提到了在本部分会用到的ConfigurationClassPostProcessor这个家伙，不熟悉的就回过头再去看看吧。</p> <p>既然注册成了bean，那bean就要初始化，初始化的时候事情就发生了，所有的事件导火索就是@SpringBootApplication这个牛x的注解。</p> </h1> <pre><code class="language-java">@Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan(excludeFilters = {       @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),       @Filter(type = FilterType.CUSTOM,             classes = AutoConfigurationExcludeFilter.class) }) public @interface SpringBootApplication { 	... } </code></pre> <p>这家伙其实是个复合注解，看到了我们想要的了吧，@EnableAutoConfiguration这家伙出现了。</p> </h1> <pre><code class="language-java">@Inherited @AutoConfigurationPackage @Import(AutoConfigurationImportSelector.class) public @interface EnableAutoConfiguration {     ... } </code></pre> <p>这家伙也是个复合注解。</p> <h2>@AutoConfigurationPackage</h2> <pre><code class="language-java">@Inherited @Import(AutoConfigurationPackages.Registrar.class) public @interface AutoConfigurationPackage {} </code></pre> <p><a href="mailto:%E6%88%91%E4%BB%AC%E6%9D%A5%E7%9C%8B@Import%E7%9A%84AutoConfigurationPackages.Registrar%E8%BF%99%E4%B8%AA%E4%B8%9C%E8%A5%BF%E5%88%B0%E5%BA%95%E6%B3%A8%E5%86%8C%E4%BA%86%E4%B8%AA%E5%95%A5%E5%AD%90%E3%80%82" rel="nofollow">我们来看@Import的AutoConfigurationPackages.Registrar这个东西到底注册了个啥子。</a></p> <pre><code class="language-java">public void registerBeanDefinitions(AnnotationMetadata metadata,       BeanDefinitionRegistry registry) {    register(registry, new PackageImport(metadata).getPackageName()); } </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230118/877199255e701cd178278c7193b5f6bd.jpg" alt="springboot-autoConfiguration原理"></p> <p>metadata其实就包含了我们的主类信息。</p> <p>我们看看PackageImport的构造方法，初始化了packageName，也就是我们主类所在的包名。</p> <pre><code class="language-java">PackageImport(AnnotationMetadata metadata) { 	this.packageName = ClassUtils.getPackageName(metadata.getClassName()); } </code></pre> <p>我们继续进register方法看。</p> <pre><code class="language-java">public static void register(BeanDefinitionRegistry registry, String... packageNames) { 	//检查是否已经注册了org.springframework.boot.autoconfigure.AutoConfigurationPackages 	if (registry.containsBeanDefinition(BEAN)) { 		//如果已经注册了，就直接获取 		BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN); 		ConstructorArgumentValues constructorArguments = beanDefinition 				.getConstructorArgumentValues(); 		//把新的packageName加进去 		constructorArguments.addIndexedArgumentValue(0, 				addBasePackages(constructorArguments, packageNames)); 	} 	else { 		//如果没有注册，就重新注册一个 		GenericBeanDefinition beanDefinition = new GenericBeanDefinition(); 		//设置bean类型 		beanDefinition.setBeanClass(BasePackages.class); 		//添加packageNames 		beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0, 				packageNames); 		beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE); 		//注册bean 		registry.registerBeanDefinition(BEAN, beanDefinition); 	} } </code></pre> <p>逻辑很清晰，如果没有注册指定的bean，那么就新注册一个，把packageName加进去；如果已经有了指定的bean，那么就直接把packageName加进去。<strong>这就是为什么我们的主类不用加@CompomnentScan也能扫描我们的bean了，扫描的只是主类package以及其子package</strong>。</p> <p>扫描部分就不做过多解释了。</p> <h2>ConfigurationClassPostProcessor</h2> <p>介绍AutoConfigurationImportSelector之前我先来初略介绍一下ConfigurationClassPostProcessor这个东西。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230118/90812fff371784aaa2abd681898e2bcb.jpg" alt="springboot-autoConfiguration原理"></p> <p>可以看到这个家伙实现了BeanDefinitionRegistryPostProcessor，这东西在哪里调用的我就不解释了哈。我们直接来看核心方法。</p> <pre><code class="language-java">// BeanDefinitionRegistryPostProcessor.java public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {    //...    processConfigBeanDefinitions(registry); }  public void processConfigBeanDefinitions(BeanDefinitionRegistry registry){     // 由于代码过多，就不贴了，只介绍我们需要的部分     ConfigurationClassParser parser = new ConfigurationClassParser(...);     parser.parse(candidates);     //... } </code></pre> <p>继续看parser.parse()方法.</p> <pre><code class="language-java">public void parse(Set&lt;BeanDefinitionHolder&gt; configCandidates) {    for (BeanDefinitionHolder holder : configCandidates) {       BeanDefinition bd = holder.getBeanDefinition();       try {          if (bd instanceof AnnotatedBeanDefinition) {              //这个地方会把初始化deferredImportSelectorHandler，即把所有的selector都放到这个家伙当中              //逻辑很深，下面会说在哪里             parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());          }        //...    }    this.deferredImportSelectorHandler.process(); } </code></pre> <p>上图parse方法的逻辑很深，我们的我们的selector加入deferredImportSelectorHandler这个家伙的逻辑是在这个地方，parse-&gt;processConfigurationClass-&gt;doProcessConfigurationClass-&gt;processImports,然后在这个方法中的this.deferredImportSelectorHandler.handle()方法。</p> <blockquote> <p>ImportSelectorHandler的处理</p> </blockquote> <p>我们的selector加入之后，就要处理selector了，来看this.deferredImportSelectorHandler.process();的process方法。</p> <pre><code class="language-java">// ConfigurationClassParser.DeferredImportSelectorHandler.java public void process() {     //赋值DeferredImportSelectorHandler持有的所有selectors    List&lt;DeferredImportSelectorHolder&gt; deferredImports = this.deferredImportSelectors;    this.deferredImportSelectors = null;    try {       if (deferredImports != null) {          DeferredImportSelectorGroupingHandler handler = new DeferredImportSelectorGroupingHandler();          deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);           //对deferredImports的每一个对象，都调用handler的register方法，即注册到handler当中          deferredImports.forEach(handler::register);           //祖册到handler当中之后，执行handler的processGroupImports方法          handler.processGroupImports();       }    }    finally {        //初始化deferredImportSelectors       this.deferredImportSelectors = new ArrayList&lt;&gt;();    } } </code></pre> <blockquote> <blockquote> <p>register</p> </blockquote> </blockquote> <p>调用handler的register的时候，会涉及到一个group的东西，主要作用就是将不同的selector分组存放。来看一下这个方法吧。</p> <pre><code class="language-java">// ConfigurationClassParser.DeferredImportSelectorGroupingHandler.java public void register(DeferredImportSelectorHolder deferredImport) {     //这个地方的getImportGroup就是调用我们的importSelector来获取一个所属的组    Class&lt;? extends Group&gt; group = deferredImport.getImportSelector()          .getImportGroup();     //放到map当中    DeferredImportSelectorGrouping grouping = this.groupings.computeIfAbsent(          (group != null ? group : deferredImport),          key -&gt; new DeferredImportSelectorGrouping(createGroup(group)));    grouping.add(deferredImport);    this.configurationClasses.put(deferredImport.getConfigurationClass().getMetadata(),          deferredImport.getConfigurationClass()); } </code></pre> <p>来看一下我们的AutoConfigurationImportSelector所属的组。</p> <pre><code class="language-java">// AutoConfigurationImportSelector.java public Class&lt;? extends Group&gt; getImportGroup() { 	return AutoConfigurationGroup.class; } </code></pre> <blockquote> <blockquote> <p>handler.processGroupImports</p> </blockquote> </blockquote> <p>继续来看handler.processGroupImports.</p> <pre><code class="language-java">// ConfigurationClassParser.DeferredImportSelectorGroupingHandler.java public void processGroupImports() {     //遍历所有的组    for (DeferredImportSelectorGrouping grouping : this.groupings.values()) {        //注意这个荫蔽的方法getImports()       grouping.getImports().forEach(entry -&gt; {          ConfigurationClass configurationClass = this.configurationClasses.get(                entry.getMetadata());          try {              //方法里头会注册相应的bean             processImports(configurationClass, asSourceClass(configurationClass),                   asSourceClasses(entry.getImportClassName()), false);          }          //...       });    } } </code></pre> <p>继续来看看getImports。</p> <pre><code class="language-java">// DeferredImportSelectorGrouping.java public Iterable&lt;Group.Entry&gt; getImports() {     //遍历组里面的所有DeferredImportSelectorHolder    for (DeferredImportSelectorHolder deferredImport : this.deferredImports) {        //执行process方法，这个group就是我们的selector所属的AutoConfigurationGroup组       this.group.process(deferredImport.getConfigurationClass().getMetadata(),             deferredImport.getImportSelector());    }     //返回获取到的bean，这个方法会接下来的在selector讲    return this.group.selectImports(); } </code></pre> <p>ConfigurationClassPostProcessor的分析暂时就到这里，我们讨论的部分，大体上就是处理bean的注解，然后处理Selectors，当然selectors里面获取到的bean肯定也是有注解的bean，然后通过这个类去注册，处理。</p> <p>至于这最后出现的this.group.process()和this.group.selectImports()这两个方法我们留在Selector中去分析。主要是这俩方法都是他们所属的组当中的。</p> <p>里面逻辑有点长，这里来一个sequence图，大家看一下.。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230118/935a2177fcec59fa4d1c1b84e4c2a119.jpg" alt="springboot-autoConfiguration原理"></p> <h2>AutoConfigurationImportSelector</h2> <p>@EnableAutoConfiguration注解上除了上面说到的@AutoConfigurationPackage之外，还有一个@Import，我们来看哈这个import又引入了什么东西。</p> <p>先来初略看哈这个类。</p> <pre><code class="language-java">public class AutoConfigurationImportSelector implements ...{     //这个方法在老版本中会使用这个方法去获取所有配置，但是在我使用的版本中，这个方法没有使用     //而是使用的内部类AutoConfigurationGroup的selectImports方法 	public String[] selectImports(){...}     //重要方法，获取了所有自动配置的类     protected AutoConfigurationEntry getAutoConfigurationEntry(){...}     //返回所属的组     public Class&lt;? extends Group&gt; getImportGroup() { 		return AutoConfigurationGroup.class; 	}     private static class AutoConfigurationGroup implements ...{         //新版本使用的这个方法来获取的配置         public String[] selectImports(){...}         //重要方法         public void process(){...}     }          //对获取到的配置的一些封装     protected static class AutoConfigurationEntry {         ...     } } </code></pre> <p>我们在分析ConfigurationImportSelector的最后。在getImports方法后就没有继续分析了，这个方法里头出现this.group.process()和this.group.selectImports()两个方法，这两个方法在这里进行分析。</p> <blockquote> <p>注意：这里分析的process()和selectImports()是group的哦！不是Selector的！所以我们要打开我们的AutoConfigurationImportSelector，然后找到它所属的group，也就是AutoConfigurationGroup。然后再来看这俩方法。</p> </blockquote> <h3>process()</h3> <pre><code class="language-java">// AutoConfigurationImportSelector.utoConfigurationGroup.java public void process(AnnotationMetadata annotationMetadata,       DeferredImportSelector deferredImportSelector) {    //...     //获取所有的自动配置类    AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector) deferredImportSelector)          .getAutoConfigurationEntry(getAutoConfigurationMetadata(),                annotationMetadata);     //添加到当前group的集合当中，因为一个group会有很多个selector，这里用个结合，在外层每一个selector被调用该方法的时候，都可以将结果放到这个结合当中，最终调用selectImports()处理的时候就可以直接用这个集合了    this.autoConfigurationEntries.add(autoConfigurationEntry);    for (String importClassName : autoConfigurationEntry.getConfigurations()) {       this.entries.putIfAbsent(importClassName, annotationMetadata);    } } </code></pre> <p>来看一下重点的方法，getAutoConfigurationEntry(),这个方法就是我们的Selector的了，看它被强转成了AutoConfigurationImportSelector，来看看吧。</p> <pre><code class="language-java">// AutoConfigurationImportSelector.java protected AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) { 	//检查是否开启自动配置功能 	if (!isEnabled(annotationMetadata)) { 		return EMPTY_ENTRY; 	} 	//获取注解的属性值，exclude,excludeName 	AnnotationAttributes attributes = getAttributes(annotationMetadata); 	//获取所有的自动配置类 	List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, 			attributes); 	//去重，当前版本其实就是换了个集合，使用了LinkedHashList 	configurations = removeDuplicates(configurations); 	//把不需要自动配置的(exclude的)放到集合 	Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes); 	//检查不需要自动配置的class 	checkExcludedClasses(configurations, exclusions); 	//移除掉不需要的自动配置或者不存在的自动配置 	configurations.removeAll(exclusions); 	//过滤，这个地方也会用到spring.factories哦 	configurations = filter(configurations, autoConfigurationMetadata); 	//发送通知，这个地方获取监听自动配置的Listener，也会用到spring.factories哦 	fireAutoConfigurationImportEvents(configurations, exclusions); 	//封装并返回 	return new AutoConfigurationEntry(configurations, exclusions); }  protected boolean isEnabled(AnnotationMetadata metadata) { 	if (getClass() == AutoConfigurationImportSelector.class) {         //获取自动配置是否开启，默认未配置，返回true，也就是说默认就是开启的         //ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration" 		return getEnvironment().getProperty( 				EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, Boolean.class, 				true); 	} 	return true; }  protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, 		AnnotationAttributes attributes) { 	List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames( 			getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()); 	//... 日志 	return configurations; } </code></pre> <p>基本上很简单，就不多解释了，只解释下核心方法getCandidateConfigurations</p> <h5>Selector.getCandidateConfigurations</h5> <p>从上面的getCandidateConfigurations这个方法可以看到，这个方法直接调用了SpringFactoriesLoader.loadFactoryNames，很熟悉吧，来看看吧。</p> <pre><code class="language-java">// SpringFactoriesLoader.java public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) { 	String factoryClassName = factoryClass.getName(); 	return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList()); }  private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) {    MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);    if (result != null) {       return result;    }     try {        //读取classpath配置文件       Enumeration&lt;URL&gt; urls = (classLoader != null ?             classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :             ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));       result = new LinkedMultiValueMap&lt;&gt;();       while (urls.hasMoreElements()) {          URL url = urls.nextElement();          UrlResource resource = new UrlResource(url);          Properties properties = PropertiesLoaderUtils.loadProperties(resource);          for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) {             String factoryClassName = ((String) entry.getKey()).trim();             for (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {                result.add(factoryClassName, factoryName.trim());             }          }       }       cache.put(classLoader, result);       return result;    }    //... } </code></pre> <p>这个方法就不解释了吧，很熟悉吧！启动流程里头说过哦，就是那个META-INF/spring.factories哦！贴个代码回顾一下，接下来的就不解释了哈。这个地方拿到了所有的AutoConfiguration配置类。来嘛，贴个图给你看哈。</p> <pre><code class="language-properties"># META-INF/spring.factories # Auto Configure org.springframework.boot.autoconfigure.EnableAutoConfiguration=\ org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\ org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\ org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\ org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\ org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\ ...还有很多 </code></pre> <h3>selectImports()</h3> <pre><code class="language-java">public Iterable&lt;Entry&gt; selectImports() {    if (this.autoConfigurationEntries.isEmpty()) {       return Collections.emptyList();    }    //调用AutoConfigurationEntry的getExclusions转成集合    Set&lt;String&gt; allExclusions = this.autoConfigurationEntries.stream()          .map(AutoConfigurationEntry::getExclusions)          .flatMap(Collection::stream).collect(Collectors.toSet());    //调用AutoConfigurationEntry的getConfigurations转成集合    Set&lt;String&gt; processedConfigurations = this.autoConfigurationEntries.stream()          .map(AutoConfigurationEntry::getConfigurations)          .flatMap(Collection::stream)          .collect(Collectors.toCollection(LinkedHashSet::new));    //移除掉不需要自动配置的    processedConfigurations.removeAll(allExclusions);    //排序并返回    return sortAutoConfigurations(processedConfigurations,          getAutoConfigurationMetadata())          .stream()          .map((importClassName) -&gt; new Entry(                this.entries.get(importClassName), importClassName))          .collect(Collectors.toList()); } </code></pre> <p>这个方法就比较简单了，无非就是将当前组里面的所有Entry进行处理，排除掉不需要自动配置的，然后封装一下，调用一下排队的方法sortAutoConfigurations，最后返回结果。</p> <p>还记得在介绍ConfigurationClassPostProcessor的最后有一个方法吧，来看看，回忆一下。</p> <pre><code class="language-java"> grouping.getImports().forEach(entry -&gt; {     ConfigurationClass configurationClass = this.configurationClasses.get(         entry.getMetadata());     try {         //方法里头会注册相应的bean         processImports(configurationClass, asSourceClass(configurationClass),                   asSourceClasses(entry.getImportClassName()), false);     } } </code></pre> <p>最终这些自动配置的bean都会在这里processImports被注册成bean。被注册成bean之后就会被spring处理了。我们来看一个熟悉的MybatisAutoConfiguration自动配置类吧。</p> <pre><code class="language-java">@org.springframework.context.annotation.Configuration @ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class }) @ConditionalOnSingleCandidate(DataSource.class) @EnableConfigurationProperties(MybatisProperties.class) @AutoConfigureAfter(DataSourceAutoConfiguration.class) public class MybatisAutoConfiguration implements InitializingBean {     @Bean     public Xxx getXxx(){...}     //其他就不写了，自己去看类吧，都是些配置 } </code></pre> <p>看到了吧，这个bean其实就是个配置bean，就跟我们自己写@Configuration的配置一样，只不过springboot把这些都给我们写好了，我们只需要加个依赖，这些配置就全部进来了，于是就有了这些配置，我们只需要再配置上一些数据库啊参数啊啥的就能启用相应的功能了。</p> <p>这些都是springboot-starter的功劳哦！懂了autoConfiguration，离starter就只差个demo了哦，哈哈~爽吧。</p> <p>over ~~~</p> </div> <p>转载于:https://my.oschina.net/wtkid/blog/3080785</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-65185.htm">动物医院实践心得5000字内容（动物医院社会实践报告）</a></p>
                                        <p>下一个：<a href="/news/article-65769.htm">chrome浏览器隐藏滚动条</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-63338.htm" title="动物医院英文绘本怎么写图片大全（动物医院英语短语）">动物医院英文绘本怎么写图片大全（动物医院英语短语）</a></li>
                        <li class="py-2"><a href="/news/article-40003.htm" title="动物防疫工作方针 动物防疫工作方针是什么">动物防疫工作方针 动物防疫工作方针是什么</a></li>
                        <li class="py-2"><a href="/news/article-43476.htm" title="动物接种疫苗后产生的免疫称为 动物接种疫苗后产生的免疫称为什么">动物接种疫苗后产生的免疫称为 动物接种疫苗后产生的免疫称为什么</a></li>
                        <li class="py-2"><a href="/news/article-65768.htm" title="springboot-autoConfiguration原理">springboot-autoConfiguration原理</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-28-free-shadowrocket-node.htm" title="2月28日|最高速度21.2M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐">2月28日|最高速度21.2M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-38531.htm" title="动物医院实践心得5000字内容怎么写呀 动物医院实践心得5000字内容怎么写呀作文">动物医院实践心得5000字内容怎么写呀 动物医院实践心得5000字内容怎么写呀作文</a></li>
                        <li class="py-2"><a href="/news/article-62738.htm" title="在深圳开个宠物店需要多少钱（在深圳开个宠物店需要多少钱一个月）">在深圳开个宠物店需要多少钱（在深圳开个宠物店需要多少钱一个月）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-27-free-node-subscribe-links.htm" title="2月27日|最高速度19.3M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐">2月27日|最高速度19.3M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-2-free-ssr-node.htm" title="3月2日|最高速度23M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐">3月2日|最高速度23M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-58071.htm" title="C++中的匿名对象的概念和使用">C++中的匿名对象的概念和使用</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div> <!-- end of container -->
    </div> <!-- end of basic-1 -->
    <!-- end of details 1 -->
    
        <!-- Copyright -->
    <div class="copyright bg-gray">
        <div class="container">
            <div class="row">
                <div class="col-lg-6">
                    <ul class="list-unstyled li-space-lg p-small">
                        <li><a href="#">Article Details</a></li>
                        <li><a href="#">Terms & Conditions</a></li>
                        <li><a href="#">Privacy Policy</a></li>
                    </ul>
                </div> <!-- end of col -->
                <div class="col-lg-6">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        <a href="/">Hysteria2官网订阅站</a> 版权所有 Powered by WordPress
                    </p>
                </div> <!-- end of col -->
            </div> <!-- enf of row -->
        </div> <!-- end of container -->
    </div> <!-- end of copyright -->
    <!-- end of copyright -->
    <!-- Back To Top Button -->
    <button onclick="topFunction()" id="myBtn">
        <img src="/assets/website/img/hysteria2/up-arrow.png" alt="alternative">
    </button>
    <!-- end of back to top button -->
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/hysteria2/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2/bootstrap.min.js"></script> <!-- Bootstrap framework -->
    <script src="/assets/website/js/frontend/hysteria2/swiper.min.js"></script> <!-- Swiper for image and text sliders -->
    <script src="/assets/website/js/frontend/hysteria2/purecounter.min.js"></script> <!-- Purecounter counter for statistics numbers -->
    <script src="/assets/website/js/frontend/hysteria2/isotope.pkgd.min.js"></script> <!-- Isotope for filter -->
    <script src="/assets/website/js/frontend/hysteria2/scripts.js"></script> <!-- Custom scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>