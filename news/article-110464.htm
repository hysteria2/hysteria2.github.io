<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hysteria2.github.io/news/article-110464.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <!-- Webpage Title -->
    <title>JavaCPP快速入门(官方demo增强版)</title>
        <meta name="description" content="欢迎访问我的GitHub  这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos   关于JavaCPP  JavaCPP 使得Jav" />
        <link rel="icon" href="/assets/website/img/hysteria2/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Hysteria2官网订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hysteria2.github.io/news/article-110464.htm" />
    <meta property="og:site_name" content="Hysteria2官网订阅站" />
    <meta property="og:title" content="JavaCPP快速入门(官方demo增强版)" />
    <meta property="og:image" content="https://hysteria2.github.io/uploads/20240507/52dc5217afe357e759836c650315b8d4.webp" />
        <meta property="og:release_date" content="2025-05-03T10:28:33" />
    <meta property="og:updated_time" content="2025-05-03T10:28:33" />
        <meta property="og:description" content="欢迎访问我的GitHub  这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos   关于JavaCPP  JavaCPP 使得Jav" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="JavaCPP快速入门(官方demo增强版)">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/fontawesome-all.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/swiper.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/styles.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0LQ0YHE09L"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0LQ0YHE09L');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-bs-spy="scroll" data-bs-target="#navbarExample" data-page="detail">
        <!-- Navigation -->
    <nav id="navbarExample" class="navbar navbar-expand-lg fixed-top navbar-light" aria-label="Main navigation">
        <div class="container">
            <!-- Image Logo -->
            <a class="navbar-brand logo-image" href="/">
                            <span>Hysteria2</span>
                        </a>
            <!-- Text Logo - Use this if you don't have a graphic logo -->
            <!-- <a class="navbar-brand logo-text" href="index.html">Zinc</a> -->
            <button class="navbar-toggler p-0 border-0" type="button" id="navbarSideCollapse" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse offcanvas-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav ms-auto navbar-nav-scroll">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div> <!-- end of navbar-collapse -->
        </div> <!-- end of container -->
    </nav> <!-- end of navbar -->
    <!-- end of navigation -->
    <!-- Header -->
    <header class="ex-header">
        <div class="container">
            <div class="row">
                <div class="col-xl-10 offset-xl-1">
                    <h1>JavaCPP快速入门(官方demo增强版)</h1>
                    <div class="section-title">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </div>
                </div> <!-- end of col -->
            </div> <!-- end of row -->
        </div> <!-- end of container -->
    </header> <!-- end of ex-header -->
    <!-- end of header -->
    <!-- Details 1 -->
    <div id="details" class="basic-1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h3> 欢迎访问我的GitHub</h3> <blockquote> <p>这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos</p> </blockquote> <h3> 关于JavaCPP</h3> <ul> <li>JavaCPP 使得Java 应用可以在高效的访问本地C++方法，JavaCPP底层使用了JNI技术，可以广泛的用在Java SE应用中（也包括安卓），以下两个特性是JavaCPP的关键，稍后咱们会用到：</li> </ul> <ol> <li>提供一些注解，将Java代码映射为C++代码</li> <li>提供一个jar，用<font color="blue">java -jar</font>命令可以将C++代码转为java应用可以访问的动态链接库文件；</li> </ol> <ul> <li>目前JavaCPP团队已经用JavaCPP为多个著名C++项目生成了完整的接口，这意味着咱们的java应用可以很方便的使用这些C++库，这里截取部分项目如下图，更详细的列表请访问：https://github.com/bytedeco/javacpp-presets</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230110/e9dc686551b04e699f5c99ed2a6610c7.jpg" alt="JavaCPP快速入门(官方demo增强版)"></p> <h3> 本篇概览</h3> <ul> <li>今天咱们先写C++函数，再写Java类，该Java类用JavaCPP调用C++函数；</li> <li>提前小结JavaCPP开发的基本步骤如下图，稍后就按这些步骤去做：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230110/bc1f5e5175d27d90d5ebfe16c961e9dc.jpg" alt="JavaCPP快速入门(官方demo增强版)"> </li> </ul> <h3> 与官方demo的差异</h3> <ul> <li>聪明的您应该会想到：入门demo，JavaCPP官方也有啊(https://github.com/bytedeco/javacpp)，难道欣宸还能比官方的好？</li> <li>官方的入门demo一定是最好的，这个毋庸置疑，我这里与官方的不同之处，是添加了下面这些官方没提到的内容，更符合自己的开发习惯（官方没有这些的原因，我觉得应该是更关注JavaCPP本身，而不是一些其他的细枝末节）：</li> </ul> <ol> <li> <p>如下图，官方的C++代码只有一个<font color="blue">NativeLibrary.h</font>文件，函数功能也在这个文件中，最终生成了一个jni的so文件，而实际上，应该是头文件与功能代码分离，因此本文中的头文件和C++函数的源码是分开的，先生成函数功能的so，再在java中生成jni的so，一共会有两个so文件，至于这两个so如何配置和访问，也是本文的重点之一：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230110/0733d24257c51a90d10dd8786db00211.jpg" alt="JavaCPP快速入门(官方demo增强版)"></p> </li> <li> <p>官方demo的java源码如下图，是没有package信息的，而实际java工程中都会有package，由此带来的路径问题，例如头文件放哪里？编译和生成so文件时的命令行怎么处理package信息，等等官方并没有提到，而在本篇咱们的java类是有package的，与之相关的路径问题也会解决：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230110/03bb61f2ba191f80f8b1635ef748a695.jpg" alt="JavaCPP快速入门(官方demo增强版)"></p> </li> <li> <p>官方demo在运行时使用的依赖库是<font color="blue">org.bytedeco:javacpp:1.5.5</font>，运行时会输出以下警告信息，本篇会解决这个告警问题：</p> </li> </ol> <pre><code class="prism language-shell">Warning: Could not load Loader: java.lang.UnsatisfiedLinkError: no jnijavacpp <span class="token keyword">in</span> java.library.path </code></pre> <h3> 环境信息</h3> <ul> <li>这里给出我的环境信息，您可以作为参考：</li> </ul> <ol> <li>操作系统：Ubuntu 16.04.5 LTS (server版，64位)</li> <li>g++：(Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609</li> <li>JDK：1.8.0_291</li> <li>JavaCPP：1.5.5</li> <li>操作账号：root</li> </ol> <h3> javacpp-1.5.5.jar文件下载</h3> <ul> <li>本篇不会用到maven或者gradle，因此所需的jar文件需要自行准备，您可以从官网、maven中央仓库等地方下载，也可以从下面两个地方任选一个下载：</li> </ul> <ol> <li>CSDN（不用积分）：https://download.csdn.net/download/boling_cavalry/20189395</li> <li>GitHub：https://raw.githubusercontent.com/zq2599/blog_download_files/master/files/javacpp-1.5.5.jar</li> </ol> <h3> 完整源码和相关文件下载</h3> <ul> <li>本次实战的所有源码以及相关文件，我这里都按照实战的目录位置打包上传到服务器，如果有需要，您可以从下面两个地方任选一个下载，用以参考，</li> </ul> <ol> <li>CSDN（不用积分）：https://download.csdn.net/download/boling_cavalry/20189692</li> <li>GitHub：https://raw.githubusercontent.com/zq2599/blog_download_files/master/files/javacpp-project.tar</li> </ol> <ul> <li>接下进入实战环节</li> </ul> <h3> C++开发</h3> <ul> <li>新建一个文件夹，我这边是<font color="blue">/root/javacpp/cpp</font>，C++开发都在此文件夹下进行</li> <li>C++部分总共要写三个文件，分别是：</li> </ul> <ol> <li>C++函数的源码：NativeLibrary.cpp</li> <li>头文件：NativeLibrary.h</li> <li>测试函数功能的文件：test.cpp（该文件仅用于测试C++函数是否正常可用，与JavcCPP无关）</li> </ol> <ul> <li>接下来分别编写，首先是NativeLibrary.cpp，如下，仅有加法的方法：</li> </ul> <pre><code class="prism language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"NativeLibrary.h"</span> </span>  namespace NativeLibrary <span class="token punctuation">{<!-- --></span>       <span class="token keyword">int</span> MyFunc<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <ul> <li>头文件：</li> </ul> <pre><code class="prism language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>  namespace NativeLibrary <span class="token punctuation">{<!-- --></span>  	class MyFunc<span class="token punctuation">{<!-- --></span> 	public<span class="token operator">:</span> 		<span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">;</span> 		<span class="token operator">~</span><span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">;</span> 		<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <ul> <li>测试文件test.cpp，可见是验证MyFunc类的方法是否正常：</li> </ul> <pre><code class="prism language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"NativeLibrary.h"</span></span>  using namespace NativeLibrary<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 	MyFunc myFunc<span class="token punctuation">;</span> 	<span class="token keyword">int</span> value <span class="token operator">=</span> myFunc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"add value "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <ul> <li>执行以下命令，编译NativeLibrary.cpp，得到so文件<font color="blue">libMyFunc.so</font>：</li> </ul> <pre><code class="prism language-shell">g++ -std<span class="token operator">=</span>c++11 -fPIC -shared NativeLibrary.cpp -o libMyFunc.so </code></pre> <ul> <li>执行以下命令，编译和链接test.cpp，得到可执行文件<font color="blue">test</font>：</li> </ul> <pre><code class="prism language-shell">g++ test.cpp -o <span class="token builtin class-name">test</span> ./libMyFunc.so </code></pre> <ul> <li>运行可执行文件试试，命令是<font color="blue">./test</font>：</li> </ul> <pre><code class="prism language-shell">root@docker:~/javacpp/cpp<span class="token comment"># ./test</span> <span class="token function">add</span> value <span class="token number">3</span> </code></pre> <ul> <li>将<font color="red">libMyFunc.so</font>文件复制到<font color="blue">/usr/lib/</font>目录下</li> <li>test的执行结果符合预期，证明so文件创建成功，记住下面两个关键信息，稍后会用到：</li> </ul> <ol> <li>头文件是<font color="blue">NativeLibrary.h</font> </li> <li>so文件是<font color="blue">libMyFunc.so</font> </li> </ol> <ul> <li>接下来是java部分</li> </ul> <h3> Java开发</h3> <ul> <li>简单起见，咱们手写java文件，不创建maven工程</li> <li>新建一个文件夹，我这边是<font color="blue">/root/javacpp/java</font>，java开发都在此文件夹下进行</li> <li>将文件<font color="red">javacpp-1.5.5.jar</font>复制到<font color="blue">/root/javacpp/java/</font>目录下</li> <li>出于个人习惯，喜欢将java类放在packgage下，因此建好package目录，我这里是<font color="blue">com/bolingcavalry/javacppdemo</font>，在我这里的绝对路径就是<font color="blue">/root/javacpp/java/com/bolingcavalry/javacppdemo</font> </li> <li>将文件<font color="red">NativeLibrary.h</font>复制到<font color="blue">com/bolingcavalry/javacppdemo</font>目录下</li> <li>在<font color="blue">com/bolingcavalry/javacppdemo</font>目录下新建Test.java，有几处要注意的地方稍后会提到：</li> </ul> <pre><code class="prism language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bolingcavalry<span class="token punctuation">.</span>javacppdemo</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacpp<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>bytedeco<span class="token punctuation">.</span>javacpp<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Platform</span><span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token string">"NativeLibrary.h"</span><span class="token punctuation">,</span>link<span class="token operator">=</span><span class="token string">"MyFunc"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Namespace</span><span class="token punctuation">(</span><span class="token string">"NativeLibrary"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFunc</span> <span class="token keyword">extends</span> <span class="token class-name">Pointer</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">static</span> <span class="token punctuation">{<!-- --></span> <span class="token class-name">Loader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token class-name">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>         <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// to call add functions</span>         <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">MyFunc</span> myFunc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myFunc <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <ul> <li>Test.java有以下几处需要注意：</li> </ul> <ol> <li>Namespace注解的值是命名空间，要与前面C++代码保持一致</li> <li>静态类名为<font color="red">MyFunc</font>，这个要和C++中声明的类保持一致</li> <li>Platform注解的include属性是NativeLibrary.h，作用是指定头文件</li> <li>Platform注解的link属性的值是<font color="red">MyFunc</font>，和so文件名libMyFunc.so相比，少了前面的lib前缀，以及so后缀，这是容易出错的地方，要千万小心，需要按照这个规则来设置link属性的值</li> <li>对so中的add方法，通过native关键字做声明，然后就可以使用了</li> </ol> <ul> <li>现在开发工作已经完成，接下来开始编译和运行</li> </ul> <h3> 编译和运行</h3> <ul> <li>首先是编译java文件，进入目录<font color="blue">/root/javacpp/java</font>，执行以下命令，即可生成class文件：</li> </ul> <pre><code class="prism language-shell">javac -cp javacpp-1.5.5.jar com/bolingcavalry/javacppdemo/Test.java </code></pre> <ul> <li>接下来要用javacpp-1.5.5.jar完成c++文件的创建和编译，生成linux下的so文件：</li> </ul> <pre><code class="prism language-shell">java <span class="token punctuation">\</span> -jar javacpp-1.5.5.jar <span class="token punctuation">\</span> com/bolingcavalry/javacppdemo/Test.java </code></pre> <ul> <li>控制台输出以下信息，表名so文件已经生成，并且清理掉了中间过程产生的临时文件：</li> </ul> <pre><code class="prism language-shell">root@docker:~/javacpp/java<span class="token comment"># java \</span> <span class="token operator">&gt;</span> -jar javacpp-1.5.5.jar <span class="token punctuation">\</span> <span class="token operator">&gt;</span> com/bolingcavalry/javacppdemo/Test.java Info: javac -cp javacpp-1.5.5.jar:/root/javacpp/java com/bolingcavalry/javacppdemo/Test.java  Info: Generating /root/javacpp/java/jnijavacpp.cpp Info: Generating /root/javacpp/java/com/bolingcavalry/javacppdemo/jniTest.cpp Info: Compiling /root/javacpp/java/com/bolingcavalry/javacppdemo/linux-x86_64/libjniTest.so Info: g++ -I/usr/lib/jvm/jdk1.8.0_291/include -I/usr/lib/jvm/jdk1.8.0_291/include/linux /root/javacpp/java/com/bolingcavalry/javacppdemo/jniTest.cpp /root/javacpp/java/jnijavacpp.cpp -march<span class="token operator">=</span>x86-64 -m64 -O3 -s -Wl,-rpath,<span class="token variable">$ORIGIN</span>/ -Wl,-z,noexecstack -Wl,-Bsymbolic -Wall -fPIC -pthread -shared -o libjniTest.so -lMyFunc  Info: Deleting /root/javacpp/java/com/bolingcavalry/javacppdemo/jniTest.cpp Info: Deleting /root/javacpp/java/jnijavacpp.cpp </code></pre> <ul> <li> <p>此时的<font color="blue">com/bolingcavalry/javacppdemo</font>目录下新增了一个名为<font color="red">linux-x86_64</font>的文件夹，里面的<font color="red">libjniTest.so</font>是javacpp-1.5.5.jar生成的</p> </li> <li> <p>您可以将<font color="blue">/usr/lib/</font>目录下的<font color="red">libMyFunc.so</font>文件移动到<font color="blue">linux-x86_64</font>目录下（不移动也可以，只是个人觉得业务so文件放在/usr/lib/这种公共目录下不太合适）</p> </li> <li> <p>将java应用运行起来：</p> </li> </ul> <pre><code class="prism language-shell">java -cp javacpp-1.5.5.jar:. com.bolingcavalry.javacppdemo.Test </code></pre> <ul> <li>控制台输出的信息如下所示，333表示调用so中的方法成功了：</li> </ul> <pre><code class="prism language-shell">root@docker:~/javacpp/java<span class="token comment"># java -cp javacpp-1.5.5.jar:. com.bolingcavalry.javacppdemo.Test</span> Warning: Could not load Loader: java.lang.UnsatisfiedLinkError: no jnijavacpp <span class="token keyword">in</span> java.library.path <span class="token number">333</span> </code></pre> <ul> <li>最后，将我这里c++和java的文件夹和文件的信息详细列出来，您可以参考：</li> </ul> <pre><code class="prism language-shell">root@docker:~<span class="token comment"># tree /root/javacpp</span> /root/javacpp ├── cpp │   ├── libMyFunc.so │   ├── NativeLibrary.cpp │   ├── NativeLibrary.h │   ├── <span class="token builtin class-name">test</span> │   └── test.cpp └── java     ├── com     │   └── bolingcavalry     │       └── javacppdemo     │           ├── linux-x86_64     │           │   ├── libjniTest.so     │           │   └── libMyFunc.so     │           ├── NativeLibrary.h     │           ├── Test.class     │           ├── Test.java     │           └── Test<span class="token variable">$MyFunc</span>.class     └── javacpp-1.5.5.jar  <span class="token number">6</span> directories, <span class="token number">12</span> files </code></pre> <h3> 一点小问题</h3> <ul> <li>咱们回顾一下java应用的输出，如下所示，其中有一段告警信息：</li> </ul> <pre><code class="prism language-shell">root@docker:~/javacpp/java<span class="token comment"># java -cp javacpp-1.5.5.jar:. com.bolingcavalry.javacppdemo.Test</span> Warning: Could not load Loader: java.lang.UnsatisfiedLinkError: no jnijavacpp <span class="token keyword">in</span> java.library.path <span class="token number">333</span> </code></pre> <ul> <li>上述告警信息不会影响功能，如果想消除掉，就不能只用<font color="blue">org.bytedeco:javacpp:1.5.5</font>这一个库，而是<font color="blue">org.bytedeco:javacpp-platform:1.5.5</font>，<font color="red"><strong>以及它的依赖库</strong></font> </li> <li>由于本篇没有用到maven或者gradle，因此很难将<font color="blue">org.bytedeco:javacpp-platform:1.5.5</font>及其依赖库集齐，我这里已经将所有jar文件打包上传，您可以选择下面任意一种方式下载：</li> </ul> <ol> <li>CSDN（不用积分）：https://download.csdn.net/download/boling_cavalry/20188764</li> <li>GitHub：https://raw.githubusercontent.com/zq2599/blog_download_files/master/files/javacpp-platform155.tar</li> </ol> <ul> <li>下载下来后解压，是个名为<font color="blue">lib</font>的文件夹，将此文件夹放在<font color="blue">/root/javacpp/java/</font>目录下</li> <li>lib文件夹下的jar只是在运行时用到，编译时用不上，因此现在可以再次运行java应用了，命令如下：</li> </ul> <pre><code class="prism language-shell">java -cp lib/*:. com.bolingcavalry.javacppdemo.Test </code></pre> <ul> <li> <p>在看控制台输出如下图，这次没有告警了：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230110/506706ceb6e32e0f91f09b02cb60ef6e.jpg" alt="JavaCPP快速入门(官方demo增强版)"></p> </li> <li> <p>本次实战最终所有文件与目录信息如下，供您参考：</p> </li> </ul> <pre><code class="prism language-shell">root@docker:~/javacpp<span class="token comment"># tree /root/javacpp</span> /root/javacpp ├── cpp │   ├── libMyFunc.so │   ├── NativeLibrary.cpp │   ├── NativeLibrary.h │   ├── <span class="token builtin class-name">test</span> │   └── test.cpp └── java     ├── com     │   └── bolingcavalry     │       └── javacppdemo     │           ├── linux-x86_64     │           │   ├── libjniTest.so     │           │   └── libMyFunc.so     │           ├── NativeLibrary.h     │           ├── Test.class     │           ├── Test.java     │           └── Test<span class="token variable">$MyFunc</span>.class     ├── javacpp-1.5.5.jar     └── lib         ├── javacpp-1.5.5-android-arm64.jar         ├── javacpp-1.5.5-android-arm.jar         ├── javacpp-1.5.5-android-x86_64.jar         ├── javacpp-1.5.5-android-x86.jar         ├── javacpp-1.5.5-ios-arm64.jar         ├── javacpp-1.5.5-ios-x86_64.jar         ├── javacpp-1.5.5.jar         ├── javacpp-1.5.5-linux-arm64.jar         ├── javacpp-1.5.5-linux-armhf.jar         ├── javacpp-1.5.5-linux-ppc64le.jar         ├── javacpp-1.5.5-linux-x86_64.jar         ├── javacpp-1.5.5-linux-x86.jar         ├── javacpp-1.5.5-macosx-arm64.jar         ├── javacpp-1.5.5-macosx-x86_64.jar         ├── javacpp-1.5.5-windows-x86_64.jar         ├── javacpp-1.5.5-windows-x86.jar         └── javacpp-platform-1.5.5.jar  <span class="token number">7</span> directories, <span class="token number">29</span> files </code></pre> <ul> <li>至此，JavaCPP入门体验已经完成，接下来做个小结，将关键点列出来</li> </ul> <h3> 关键点小结</h3> <ul> <li>今天的实战，咱们借助JavaCPP，在java应用中使用c++的函数，有以下几处需要重点关注：</li> </ul> <ol> <li>在Java代码中，要有与C++中同名的静态类</li> <li>注意Java代码中Namespace注解和C++中的namespace一致</li> <li>C++的头文件要和Java类放在同一个目录下</li> <li>使用so库的时候，库名为<font color="blue">libMyFunc.so</font>，Platform注解的link参数的值就是库名去掉<font color="red">lib</font>前缀和<font color="red">.so</font>后缀</li> <li>C++函数的so文件可以放在/usr/lib目录，也可以移至linux-x86_64目录</li> </ol> <ul> <li>至此，JavaCPP快速入门就完成了，如果您正在学习JavaCPP技术，希望本篇能给您一些参考；</li> </ul> <h3> 你不孤单，欣宸原创一路相伴</h3> <ol> <li>Java系列</li> <li>Spring系列</li> <li>Docker系列</li> <li>kubernetes系列</li> <li>数据库+中间件系列</li> <li>DevOps系列</li> </ol> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-109682.htm">抖音上免费领养狗狗是真的吗（网上说免费领养狗狗是真的吗）</a></p>
                                        <p>下一个：<a href="/news/article-110468.htm">解决flex布局,子元素大小自适应问题</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-108849.htm" title="如何在 C# 循环中捕获局部变量？">如何在 C# 循环中捕获局部变量？</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-24-free-ssr-node.htm" title="4月24日|最高速度21.5M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐">4月24日|最高速度21.5M/S，2025最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-87483.htm" title="动物疫苗归哪个部门管（动物疫苗监管部门）">动物疫苗归哪个部门管（动物疫苗监管部门）</a></li>
                        <li class="py-2"><a href="/news/article-86051.htm" title="动物医院实训总结怎么写（动物医院实训总结怎么写范文）">动物医院实训总结怎么写（动物医院实训总结怎么写范文）</a></li>
                        <li class="py-2"><a href="/news/article-101468.htm" title="动物医院诊室设计图 动物医院诊室设计图片">动物医院诊室设计图 动物医院诊室设计图片</a></li>
                        <li class="py-2"><a href="/news/article-111383.htm" title="c级宠物美容师证书（c级宠物美容师证书图片）">c级宠物美容师证书（c级宠物美容师证书图片）</a></li>
                        <li class="py-2"><a href="/news/article-97858.htm" title="南京宠物猫领养中心在哪里 南京宠物猫领养中心在哪里啊">南京宠物猫领养中心在哪里 南京宠物猫领养中心在哪里啊</a></li>
                        <li class="py-2"><a href="/news/article-97076.htm" title="在哪儿可以在同城免费领养猫咪（怎么在同城领养猫）">在哪儿可以在同城免费领养猫咪（怎么在同城领养猫）</a></li>
                        <li class="py-2"><a href="/news/article-97862.htm" title="睡袋什么牌子好 成人(睡袋什么牌子好 成人 羽绒)">睡袋什么牌子好 成人(睡袋什么牌子好 成人 羽绒)</a></li>
                        <li class="py-2"><a href="/news/article-91855.htm" title="动物疫苗打几次有效（动物疫苗打一次管多长时间）">动物疫苗打几次有效（动物疫苗打一次管多长时间）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-05/" title="2025-05 归档">2025-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">88</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div> <!-- end of container -->
    </div> <!-- end of basic-1 -->
    <!-- end of details 1 -->
    
        <!-- Copyright -->
    <div class="copyright bg-gray">
        <div class="container">
            <div class="row">
                <div class="col-lg-6">
                    <ul class="list-unstyled li-space-lg p-small">
                        <li><a href="#">Article Details</a></li>
                        <li><a href="#">Terms & Conditions</a></li>
                        <li><a href="#">Privacy Policy</a></li>
                    </ul>
                </div> <!-- end of col -->
                <div class="col-lg-6">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p>
                        <a href="/">Hysteria2官网订阅站</a> 版权所有 Powered by WordPress
                    </p>
                </div> <!-- end of col -->
            </div> <!-- enf of row -->
        </div> <!-- end of container -->
    </div> <!-- end of copyright -->
    <!-- end of copyright -->
    <!-- Back To Top Button -->
    <button onclick="topFunction()" id="myBtn">
        <img src="/assets/website/img/hysteria2/up-arrow.png" alt="alternative">
    </button>
    <!-- end of back to top button -->
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/hysteria2/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2/bootstrap.min.js"></script> <!-- Bootstrap framework -->
    <script src="/assets/website/js/frontend/hysteria2/swiper.min.js"></script> <!-- Swiper for image and text sliders -->
    <script src="/assets/website/js/frontend/hysteria2/purecounter.min.js"></script> <!-- Purecounter counter for statistics numbers -->
    <script src="/assets/website/js/frontend/hysteria2/isotope.pkgd.min.js"></script> <!-- Isotope for filter -->
    <script src="/assets/website/js/frontend/hysteria2/scripts.js"></script> <!-- Custom scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>