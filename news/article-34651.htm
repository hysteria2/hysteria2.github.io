<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://hysteria2.github.io/news/article-34651.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <!-- Webpage Title -->
    <title>SpringBoot重点详解&#8211;使用JPA操作数据库</title>
        <meta name="description" content="目录 JPA &amp; Spring Data JPA 配置Maven依赖 配置数据源和JPA 创建POJO实体 数据持久化 使用Spring Data JPA接口（方式一） CrudReposit" />
        <link rel="icon" href="/assets/website/img/hysteria2/favicon.ico" type="image/x-icon"/>
    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/fontawesome-all.min.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/swiper.css" rel="stylesheet">
    <link href="/assets/website/css/hysteria2/styles.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0LQ0YHE09L"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0LQ0YHE09L');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-bs-spy="scroll" data-bs-target="#navbarExample" data-page="detail">
        <!-- Navigation -->
    <nav id="navbarExample" class="navbar navbar-expand-lg fixed-top navbar-light" aria-label="Main navigation">
        <div class="container">
            <!-- Image Logo -->
                        <a class="navbar-brand logo-image" href="/">
                Hysteria2节点
            </a>
                        <!-- Text Logo - Use this if you don't have a graphic logo -->
            <!-- <a class="navbar-brand logo-text" href="index.html">Zinc</a> -->
            <button class="navbar-toggler p-0 border-0" type="button" id="navbarSideCollapse" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse offcanvas-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav ms-auto navbar-nav-scroll">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="#">关于</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">联系</a>
                    </li>
                </ul>
            </div> <!-- end of navbar-collapse -->
        </div> <!-- end of container -->
    </nav> <!-- end of navbar -->
    <!-- end of navigation -->
    <!-- Header -->
    <header class="ex-header">
        <div class="container">
            <div class="row">
                <div class="col-xl-10 offset-xl-1">
                    <h1>SpringBoot重点详解&#8211;使用JPA操作数据库</h1>
                    <div class="section-title">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </div>
                </div> <!-- end of col -->
            </div> <!-- end of row -->
        </div> <!-- end of container -->
    </header> <!-- end of ex-header -->
    <!-- end of header -->
    <!-- Details 1 -->
    <div id="details" class="basic-1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p id="main-toc"><strong>目录</strong></p> <p id="JPA%20%26%20Spring%20Data%20JPA-toc" style="margin-left:0px;"><a href="#JPA%20%26%20Spring%20Data%20JPA" rel="nofollow">JPA &amp; Spring Data JPA</a></p> <p id="%E9%85%8D%E7%BD%AEMaven%E4%BE%9D%E8%B5%96-toc" style="margin-left:0px;"><a href="#%E9%85%8D%E7%BD%AEMaven%E4%BE%9D%E8%B5%96" rel="nofollow">配置Maven依赖</a></p> <p id="%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90%E5%92%8CJPA-toc" style="margin-left:0px;"><a href="#%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90%E5%92%8CJPA" rel="nofollow">配置数据源和JPA</a></p> <p id="%E5%88%9B%E5%BB%BAPOJO%E5%AE%9E%E4%BD%93-toc" style="margin-left:0px;"><a href="#%E5%88%9B%E5%BB%BAPOJO%E5%AE%9E%E4%BD%93" rel="nofollow">创建POJO实体</a></p> <p id="%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96-toc" style="margin-left:0px;"><a href="#%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96" rel="nofollow">数据持久化</a></p> <p id="%E4%BD%BF%E7%94%A8Spring%20Data%20JPA%E6%8E%A5%E5%8F%A3%EF%BC%88%E6%96%B9%E5%BC%8F%E4%B8%80%EF%BC%89-toc" style="margin-left:40px;"><a href="#%E4%BD%BF%E7%94%A8Spring%20Data%20JPA%E6%8E%A5%E5%8F%A3%EF%BC%88%E6%96%B9%E5%BC%8F%E4%B8%80%EF%BC%89" rel="nofollow">使用Spring Data JPA接口（方式一）</a></p> <p id="CrudRepository-toc" style="margin-left:80px;"><a href="#CrudRepository" rel="nofollow">CrudRepository</a></p> <p id="PagingAndSortingRepository-toc" style="margin-left:80px;"><a href="#PagingAndSortingRepository" rel="nofollow">PagingAndSortingRepository</a></p> <p id="JpaRepository-toc" style="margin-left:80px;"><a href="#JpaRepository" rel="nofollow">JpaRepository</a></p> <p id="QueryByExampleExecutor-toc" style="margin-left:80px;"><a href="#QueryByExampleExecutor" rel="nofollow">QueryByExampleExecutor</a></p> <p id="%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95%EF%BC%88%E6%96%B9%E5%BC%8F%E4%BA%8C%EF%BC%89-toc" style="margin-left:40px;"><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95%EF%BC%88%E6%96%B9%E5%BC%8F%E4%BA%8C%EF%BC%89" rel="nofollow">自定义查询方法（方式二）</a></p> <p id="JUnit%E6%B5%8B%E8%AF%95-toc" style="margin-left:0px;"><a href="#JUnit%E6%B5%8B%E8%AF%95" rel="nofollow">JUnit测试</a></p> <hr id="hr-toc"/> <p style="text-indent:50px;">使用数据库是开发基本应用的基础，借助于开发框架，我们已经不用编写原始的访问数据库的代码，也不用调用JDBC（Java Data Base Connectivity）或者连接池等诸如此类的被称作底层的代码，我们将从更高的层次上访问数据库，这在Springboot中更是如此，本章我们将详细介绍在Springboot中使用 Spring Data JPA 来实现对数据库的操作。</p> </h1> <p style="text-indent:50px;">JPA是Java Persistence API的简称，中文名Java持久层API，是Sun官方提出的Java持久化规范，其设计目标主要是为了简化现有的持久化开发工作和整合ORM技术。JPA使用XML文件或注解（JDK 5.0或更高版本）来描述对象-关联表的映射关系，能够将运行期的实体对象持久化到数据库，它为Java开发人员提供了一种ORM工具来管理Java应用中的关系数据。 简单地说，JPA就是为POJO（Plain Ordinary Java Object）提供持久化的标准规范，即将Java的普通对象通过对象关系映射（Object-Relational Mapping，ORM）持久化到数据库中。由于JPA是在充分吸收了现有Hibernate，TopLink，JDO等ORM框架的基础上发展而来的，因而具有易于使用、伸缩性强等优点。</p> <p style="text-indent:50px;">Spring Data JPA 是 Spring 基于 Spring Data 框架、在JPA 规范的基础上开发的一个框架，使用 Spring Data JPA 可以极大地简化JPA 的写法，可以在几乎不用写实现的情况下实现对数据库的访问和操作，除了CRUD外，还包括分页和排序等一些常用的功能。</p> </h1> <p style="text-indent:50px;">以MySQL数据库为例，为了使用JPA和MySQL，首先在工程中引入它们的Maven依赖。</p> <pre class="has"><code class="language-html">	&lt;parent&gt; 		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; 		&lt;version&gt;1.5.1.RELEASE&lt;/version&gt; 	&lt;/parent&gt; 	&lt;dependencies&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;mysql&lt;/groupId&gt; 			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; 		&lt;/dependency&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; 		&lt;/dependency&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework&lt;/groupId&gt; 			&lt;artifactId&gt;spring-test&lt;/artifactId&gt; 		&lt;/dependency&gt; 	&lt;/dependencies&gt;</code></pre> </h1> <p style="text-indent:50px;">在Springboot核心配置文件 application.properties 中配置MySQL数据源和JPA。</p> <pre class="has"><code class="language-sql">######################################################## ### Spring datasource -- Datasource configuration. ######################################################## spring.datasource.url = jdbc:mysql://localhost:3306/mybatis?characterEncoding=UTF-8 spring.datasource.username = root spring.datasource.password = 123456 spring.datasource.driverClassName = com.mysql.jdbc.Driver spring.datasource.type = org.apache.tomcat.jdbc.pool.DataSource  ######################################################## ### Java Persistence Api --  Spring jpa configuration. ######################################################## # Specify the DBMS spring.jpa.database = MYSQL # Show or not log for each sql query spring.jpa.show-sql = true # Hibernate ddl auto (create, create-drop, update, validate, none) spring.jpa.hibernate.ddl-auto = update # Naming strategy #[org.hibernate.cfg.ImprovedNamingStrategy  #org.hibernate.cfg.DefaultNamingStrategy] spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy # stripped before adding them to the entity manager) spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect</code></pre> <p style="text-indent:50px;">其中，spring.jpa.hibernate.ddl-auto 参数用来配置是否开启自动更新数据库表结构，可取create、create-drop、update、validate、none五个值。</p> <ul> <li>create 每次加载hibernate时，先删除已存在的数据库表结构再重新生成；</li> <li>create-drop 每次加载hibernate时，先删除已存在的数据库表结构再重新生成，并且当 sessionFactory关闭时自动删除生成的数据库表结构；</li> <li>update 只在第一次加载hibernate时自动生成数据库表结构，以后再次加载hibernate时根据model类自动更新表结构；</li> <li>validate 每次加载hibernate时，验证数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</li> <li>none 关闭自动更新</li> </ul> </h1> <p style="text-indent:50px;">首先创建一些普通对象，用来与数据库的表建立映射关系，在此我们只定义了员工和部门两个实体来进行示例。</p> <pre class="has"><code class="language-java">@Entity @Table(name = "tbl_employee") // 指定关联的数据库的表名 public class Employee implements Serializable {  	private static final long serialVersionUID = 1L;  	@Id 	@GeneratedValue(strategy = GenerationType.IDENTITY) 	private Long id; // 主键ID  	private String name; // 姓名  	@ManyToOne 	@JoinColumn(name = "department_id") 	private Department department; // 部门  	public Long getId() { 		return id; 	}  	public void setId(Long id) { 		this.id = id; 	}  	public String getName() { 		return name; 	}  	public void setName(String name) { 		this.name = name; 	}  	public Department getDepartment() { 		return department; 	}  	public void setDepartment(Department department) { 		this.department = department; 	}  }</code></pre> <pre class="has"><code class="language-java">@Entity @Table(name = "tbl_department") public class Department  implements Serializable{  	private static final long serialVersionUID = 1L;  	@Id 	@GeneratedValue(strategy = GenerationType.IDENTITY) 	private Long id; // 主键ID  	private String name; // 部门名称  	public Long getId() { 		return id; 	}  	public void setId(Long id) { 		this.id = id; 	}  	public String getName() { 		return name; 	}  	public void setName(String name) { 		this.name = name; 	}  }</code></pre> <p style="text-indent:50px;">其中，注解@Entity用来标记该类是一个JPA实体类，并使用了注解@Table指定关联的数据库的表名；注解@Id用来定义记录的唯一标识，并结合注解@GeneratedValue将其设置为自动生成。</p> </h1> <p style="text-indent:50px;">使用 JPA 进行数据持久化有两种实现方式。</p> <ul> <li>方式一：使用Spring Data JPA 提供的接口默认实现,</li> <li>方式二：自定义符合Spring Data JPA规则的查询方法，由框架将其自动解析为SQL。</li> </ul> <h2 id="%E4%BD%BF%E7%94%A8Spring%20Data%20JPA%E6%8E%A5%E5%8F%A3%EF%BC%88%E6%96%B9%E5%BC%8F%E4%B8%80%EF%BC%89">使用Spring Data JPA接口（方式一）</h2> <p style="text-indent:50px;">Spring Data JPA提供了一些实现了基本的数据库操作的接口类，如下图所示。</p> <p style="text-align:center;"><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads3/20220603/08a0a026ee67ff710580ff9915996996.jpg"></p> <h3 id="CrudRepository">CrudRepository</h3> <p style="text-align:center;"><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads3/20220603/001290b2ba1b415d49e385a0c2825d12.jpg"></p> <p style="text-indent:50px;">CrudRepository提供了一些简单的增删查改功能，接口定义如下。</p> <pre class="has"><code class="language-java">package org.springframework.data.repository;  import java.io.Serializable;  @NoRepositoryBean public interface CrudRepository&lt;T, ID extends Serializable&gt; extends Repository&lt;T, ID&gt; {  	&lt;S extends T&gt; S save(S entity); // 保存并返回（修改后的）实体  	&lt;S extends T&gt; Iterable&lt;S&gt; save(Iterable&lt;S&gt; entities); // 保存并返回（修改后的）实体集合  	T findOne(ID id); // 根据ID获取实体  	boolean exists(ID id); // 判断指定ID的实体是否存在  	Iterable&lt;T&gt; findAll(); // 查询所有实体  	Iterable&lt;T&gt; findAll(Iterable&lt;ID&gt; ids); // 根据ID集合查询实体  	long count(); // 获取实体的数量  	void delete(ID id); // 删除指定ID的实体  	void delete(T entity); // 删除实体  	void delete(Iterable&lt;? extends T&gt; entities); // 删除实体集合  	void deleteAll(); // 删除所有实体 }</code></pre> <h3 id="PagingAndSortingRepository">PagingAndSortingRepository</h3> <p style="text-align:center;"><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads3/20220603/d2a009e1049d59378801ae638cb46381.jpg"></p> <p style="text-indent:50px;">PagingAndSortingRepository继承于CrudRepository，除了具有CrudRepository接口的能力外，还新增了分页和排序的功能，接口定义如下。</p> <pre class="has"><code class="language-java">package org.springframework.data.repository;  import java.io.Serializable;  import org.springframework.data.domain.Page; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort;  @NoRepositoryBean public interface PagingAndSortingRepository&lt;T, ID extends Serializable&gt; extends CrudRepository&lt;T, ID&gt; {  	Iterable&lt;T&gt; findAll(Sort sort); // 查询所有实体并排序  	Page&lt;T&gt; findAll(Pageable pageable); // 分页查询实体 }</code></pre> <h3 id="JpaRepository">JpaRepository</h3> <p style="text-align:center;"><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads3/20220603/86d1336413753e306985ff2684b4f34f.jpg"></p> <p style="text-indent:50px;">JpaRepository继承于PagingAndSortingRepository，所以它传递性地拥有了以上接口的所有方法，同时，它还继承了另外一个QueryByExampleExecutor接口，拥有了该接口匹配指定样例的能力，JpaRepository接口定义如下。</p> <pre class="has"><code class="language-java">package org.springframework.data.jpa.repository;  import java.io.Serializable; import java.util.List;  import javax.persistence.EntityManager;  import org.springframework.data.domain.Example; import org.springframework.data.domain.Sort; import org.springframework.data.repository.NoRepositoryBean; import org.springframework.data.repository.PagingAndSortingRepository; import org.springframework.data.repository.query.QueryByExampleExecutor;  @NoRepositoryBean public interface JpaRepository&lt;T, ID extends Serializable&gt; 		extends PagingAndSortingRepository&lt;T, ID&gt;, QueryByExampleExecutor&lt;T&gt; {  	List&lt;T&gt; findAll(); // 查询所有实体  	List&lt;T&gt; findAll(Sort sort); // 查询所有实体并排序  	List&lt;T&gt; findAll(Iterable&lt;ID&gt; ids); // 根据ID集合查询实体  	&lt;S extends T&gt; List&lt;S&gt; save(Iterable&lt;S&gt; entities); // 保存并返回（修改后的）实体集合  	void flush(); // 提交事务  	&lt;S extends T&gt; S saveAndFlush(S entity); // 保存实体并立即提交事务  	void deleteInBatch(Iterable&lt;T&gt; entities); // 批量删除实体集合  	void deleteAllInBatch();// 批量删除所有实体  	T getOne(ID id); // 根据ID查询实体  	@Override 	&lt;S extends T&gt; List&lt;S&gt; findAll(Example&lt;S&gt; example); // 查询与指定Example匹配的所有实体  	@Override 	&lt;S extends T&gt; List&lt;S&gt; findAll(Example&lt;S&gt; example, Sort sort);// 查询与指定Example匹配的所有实体并排序  }</code></pre> <h3 id="QueryByExampleExecutor">QueryByExampleExecutor</h3> <p style="text-align:center;"><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads3/20220603/e07263069950b368452c38143d0e23af.jpg"></p> <p style="text-indent:50px;">QueryByExampleExecutor接口允许开发者根据给定的样例执行查询操作，接口定义如下。</p> <pre class="has"><code class="language-java">package org.springframework.data.repository.query;  import org.springframework.data.domain.Example; import org.springframework.data.domain.Page; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort;  public interface QueryByExampleExecutor&lt;T&gt; {  	&lt;S extends T&gt; S findOne(Example&lt;S&gt; example); // 查询与指定Example匹配的唯一实体  	&lt;S extends T&gt; Iterable&lt;S&gt; findAll(Example&lt;S&gt; example); // 查询与指定Example匹配的所有实体  	&lt;S extends T&gt; Iterable&lt;S&gt; findAll(Example&lt;S&gt; example, Sort sort); // 查询与指定Example匹配的所有实体并排序  	&lt;S extends T&gt; Page&lt;S&gt; findAll(Example&lt;S&gt; example, Pageable pageable);// 分页查询与指定Example匹配的所有实体  	&lt;S extends T&gt; long count(Example&lt;S&gt; example); // 查询与指定Example匹配的实体数量  	&lt;S extends T&gt; boolean exists(Example&lt;S&gt; example); // 判断与指定Example匹配的实体是否存在 }</code></pre> <p style="text-indent:50px;">以部门实体资源库接口DepartmentRepository为例，只需继承CrudRepository接口便会自动拥有基础的增删查改功能，无须编写一条SQL。</p> <pre class="has"><code class="language-java">@Repository public interface DepartmentRepository extends CrudRepository&lt;Department, Long&gt; {  }</code></pre> <h2 id="%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95%EF%BC%88%E6%96%B9%E5%BC%8F%E4%BA%8C%EF%BC%89">自定义查询方法（方式二）</h2> <p style="text-indent:50px;">除了可以直接使用Spring Data JPA接口提供的基础功能外，Spring Data JPA还允许开发者自定义查询方法，对于符合以下命名规则的方法，Spring Data JPA能够根据其方法名为其自动生成SQL，除了使用示例中的 find 关键字，还支持的关键字有：query、get、read、count、delete等。</p> <p style="text-align:center;"><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads3/20220603/1054b5a7de5f6337b874053fe4da93ea.jpg"></p> <p style="text-indent:50px;">另外，Spring Data JPA 还提供了对分页查询、自定义SQL、查询指定N条记录、联表查询等功能的支持，以员工实体资源库接口EmployeeRepository为例，功能代码示意如下。</p> <pre class="has"><code class="language-java">@Repository public interface EmployeeRepository extends JpaRepository&lt;Employee, Long&gt; {  	/** 	 * 根据部门ID获取员工数量 	 */ 	int countByDepartmentId(Long departmentId);  	/** 	 * 根据部门ID分页查询 	 */ 	Page&lt;Employee&gt; queryByDepartmentId(Long departmentId, Pageable pageable);  	/** 	 * 根据员工ID升序查询前10条 	 */ 	List&lt;Employee&gt; readTop10ByOrderById();  	/** 	 * 根据员工姓名取第一条记录 	 */ 	Employee getFirstByName(String name, Sort sort);  	/** 	 * 联表查询 	 */ 	@Query("select e.id as employeeId,e.name as employeeName,d.id as departmentId,d.name as departmentName from Employee e , Department d where e.id= ?1 and d.id= ?2") 	EmployeeDetail getEmployeeJoinDepartment(Long eid, Long did);  	/** 	 * 修改指定ID员工的姓名 	 */ 	@Modifying 	@Transactional(timeout = 10) 	@Query("update Employee e set e.name = ?1 where e.id = ?2") 	int modifyEmployeeNameById(String name, Long id);  	/** 	 * 删除指定ID的员工 	 */ 	@Transactional(timeout = 10) 	@Modifying 	@Query("delete from Employee where id = ?1") 	void deleteById(Long id);  }</code></pre> </h1> <p style="text-indent:50px;">为例验证上面接口的正确性，我们使用JUnit来进行测试，先增加一个JPA的配置类，代码如下。</p> <pre class="has"><code class="language-java">@Order(Ordered.HIGHEST_PRECEDENCE) @Configuration @EnableTransactionManagement(proxyTargetClass = true) @EnableJpaRepositories(basePackages = {"com.pengjunlee.repository"}) @EntityScan(basePackages = {"com.pengjunlee.entity"}) @EnableAutoConfiguration public class JpaConfiguration {  	@Bean 	PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor() { 		return new PersistenceExceptionTranslationPostProcessor(); 	} }</code></pre> <p style="text-indent:50px;">其中，@EnableTransactionManagement注解用来启用JPA事务管理，@EnableJpaRepositories注解用来启用JPA资源库发现，@EntityScan注解用来启用实体发现。</p> <p style="text-indent:50px;">配置类定义好之后，编写一个JUnit Test Case测试程序。</p> <pre class="has"><code class="language-java">@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = JpaConfiguration.class) @TestPropertySource(locations = { "classpath:application.properties" }) public class JpaTest {  	@Autowired 	DepartmentRepository departmentRepository;  	@Autowired 	EmployeeRepository employeeRepository;  	@Test 	public void addDepartmentTest() {  	}  	@Test 	public void initData() { 		// 清空员工表中的数据 		employeeRepository.deleteAll(); 		// 清空部门表中的数据 		departmentRepository.deleteAll(); 		// 部门表中添加一个开发部 		Department dept1 = new Department(); 		dept1.setName("开发部"); 		departmentRepository.save(dept1); 		// 部门表中添加一个测试部 		Department dept2 = new Department(); 		dept2.setName("测试部"); 		departmentRepository.save(dept2);  		String[] names = new String[] { "lucy", "tom", "hanmeime", "jacky", "francky", "lilly", "xiaoming", "smith", 				"walt", "sherry" }; 		// 员工表中增加10条记录 		for (int i = 0; i &lt; 10; i++) { 			Employee emp = new Employee(); 			emp.setName(names[i]); 			if (i &lt; 5) { 				emp.setDepartment(dept1); 			} else { 				emp.setDepartment(dept2); 			} 			employeeRepository.save(emp); 		} 	}  	@Test 	public void testCountByDepartmentId() { 		int count = employeeRepository.countByDepartmentId(19L); 		System.out.println(count); 	}  	@Test 	public void testQueryByDepartmentId() { 		Pageable pageable = new PageRequest(0, 10, new Sort(Sort.Direction.ASC, "name")); 		Page&lt;Employee&gt; emps = employeeRepository.queryByDepartmentId(19L, pageable);  		for (Employee emp : emps.getContent()) { 			System.out.println("员工姓名：" + emp.getName() + "，所属部门：" + emp.getDepartment().getName()); 		} 	}  	@Test 	public void testReadTop10ByOrderById() { 		List&lt;Employee&gt; emps = employeeRepository.readTop10ByOrderById(); 		for (Employee emp : emps) { 			System.out.println("员工姓名：" + emp.getName() + "，所属部门：" + emp.getDepartment().getName()); 		} 	}  	@Test 	public void testGetFirstByName() { 		Employee emp = employeeRepository.getFirstByName("xiaoming", new Sort(Direction.ASC, "id")); 		System.out.println("员工姓名：" + emp.getName() + "，所属部门：" + emp.getDepartment().getName()); 	}  	@Test 	public void testGetEmployeeJoinDepartment() { 		EmployeeDetail empDetail = employeeRepository.getEmployeeJoinDepartment(5L, 19L); 		System.out.println("员工姓名：" + empDetail.getEmployeeName() + "，部门名称：" + empDetail.getDepartmentName()); 	}  	@Test 	public void testModifyEmployeeNameById() { 		employeeRepository.modifyEmployeeNameById("chris", 5L); 	}  	@Test 	public void testDeleteById() { 		employeeRepository.deleteById(11L); 	} }</code></pre> <p style="text-indent:50px;"></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-34646.htm">GMSSL ：SM2椭圆曲线公钥密码算法-密钥交换协议</a></p>
                                        <p>下一个：<a href="/news/article-34945.htm">Git用户签名的其他操作</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-6-20-clash-v2ray-ss-ssr.htm" title="6月20日|最高速度20.5M/S，2024最新SSR/Shadowrocket/V2ray/Clash免费节点高速订阅链接">6月20日|最高速度20.5M/S，2024最新SSR/Shadowrocket/V2ray/Clash免费节点高速订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-20158.htm" title="宠物粮加工厂加盟怎么样 宠物粮加工厂加盟怎么样啊">宠物粮加工厂加盟怎么样 宠物粮加工厂加盟怎么样啊</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-26-node-share-links.htm" title="12月26日|最高速度18.5M/S，2024最新Hysteria2免费节点高速订阅链接，便宜机场推荐">12月26日|最高速度18.5M/S，2024最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-34651.htm" title="SpringBoot重点详解&#8211;使用JPA操作数据库">SpringBoot重点详解&#8211;使用JPA操作数据库</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-19-free-v2ray-subscribe.htm" title="7月19日|最高速度22.3M/S，2024最新Hysteria2免费节点高速订阅链接">7月19日|最高速度22.3M/S，2024最新Hysteria2免费节点高速订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-30-free-ssr-node.htm" title="11月30日|最高速度18.4M/S，2024最新Hysteria2免费节点高速订阅链接，便宜机场推荐">11月30日|最高速度18.4M/S，2024最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-1-free-shadowrocket-node.htm" title="12月1日|最高速度22.2M/S，2024最新Hysteria2免费节点高速订阅链接，便宜机场推荐">12月1日|最高速度22.2M/S，2024最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-5-13-clash-node.htm" title="5月13日|最高速度19M/S，2024最新V2ray/Shadowrocket/SSR/Clash免费节点高速订阅链接">5月13日|最高速度19M/S，2024最新V2ray/Shadowrocket/SSR/Clash免费节点高速订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-14-clash-windows.htm" title="12月14日|最高速度18M/S，2024最新Hysteria2免费节点高速订阅链接，便宜机场推荐">12月14日|最高速度18M/S，2024最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-7-free-node-subscribe-links.htm" title="11月7日|最高速度19.3M/S，2024最新Hysteria2免费节点高速订阅链接，便宜机场推荐">11月7日|最高速度19.3M/S，2024最新Hysteria2免费节点高速订阅链接，便宜机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">9</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div> <!-- end of container -->
    </div> <!-- end of basic-1 -->
    <!-- end of details 1 -->
    
        <!-- Copyright -->
    <div class="copyright bg-gray">
        <div class="container">
            <div class="row">
                <div class="col-lg-6">
                    <ul class="list-unstyled li-space-lg p-small">
                        <li><a href="#">Article Details</a></li>
                        <li><a href="#">Terms & Conditions</a></li>
                        <li><a href="#">Privacy Policy</a></li>
                    </ul>
                </div> <!-- end of col -->
                <div class="col-lg-6">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        <a href="/">Hysteria2官网订阅站</a> 版权所有 Powered by WordPress
                    </p>
                </div> <!-- end of col -->
            </div> <!-- enf of row -->
        </div> <!-- end of container -->
    </div> <!-- end of copyright -->
    <!-- end of copyright -->
    <!-- Back To Top Button -->
    <button onclick="topFunction()" id="myBtn">
        <img href="/assets/website/img/hysteria2/up-arrow.png" alt="alternative">
    </button>
    <!-- end of back to top button -->
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/hysteria2/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2/bootstrap.min.js"></script> <!-- Bootstrap framework -->
    <script src="/assets/website/js/frontend/hysteria2/swiper.min.js"></script> <!-- Swiper for image and text sliders -->
    <script src="/assets/website/js/frontend/hysteria2/purecounter.min.js"></script> <!-- Purecounter counter for statistics numbers -->
    <script src="/assets/website/js/frontend/hysteria2/isotope.pkgd.min.js"></script> <!-- Isotope for filter -->
    <script src="/assets/website/js/frontend/hysteria2/scripts.js"></script> <!-- Custom scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>